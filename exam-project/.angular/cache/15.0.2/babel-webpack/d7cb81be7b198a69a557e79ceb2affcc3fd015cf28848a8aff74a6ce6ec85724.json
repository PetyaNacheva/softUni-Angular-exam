{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { MessageType } from './message-bus.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message-bus.service\";\nexport class ErrorHandlerInterceptor {\n  constructor(messageBus) {\n    this.messageBus = messageBus;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(err => {\n      var _a;\n      this.messageBus.notifyForMessage({\n        text: ((_a = err === null || err === void 0 ? void 0 : err.error) === null || _a === void 0 ? void 0 : _a.message) || 'Something went wrong!',\n        type: MessageType.Error\n      });\n      // Notify header.\n      return throwError(err);\n    }));\n  }\n}\nErrorHandlerInterceptor.ɵfac = function ErrorHandlerInterceptor_Factory(t) {\n  return new (t || ErrorHandlerInterceptor)(i0.ɵɵinject(i1.MessageBusService));\n};\nErrorHandlerInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorHandlerInterceptor,\n  factory: ErrorHandlerInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAOA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAA4BC,WAAW,QAAQ,uBAAuB;;;AAGtE,OAAM,MAAOC,uBAAuB;EAElCC,YAAoBC,UAA6B;IAA7B,eAAU,GAAVA,UAAU;EAAuB;EAErDC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAACT,UAAU,CAACU,GAAG,IAAG;;MAChD,IAAI,CAACN,UAAU,CAACO,gBAAgB,CAAC;QAC/BC,IAAI,EAAE,UAAG,aAAHF,GAAG,uBAAHA,GAAG,CAAEG,KAAK,0CAAEC,OAAO,KAAI,uBAAuB;QACpDC,IAAI,EAAEd,WAAW,CAACe;OACnB,CAAC;MACF;MACA,OAAOjB,UAAU,CAACW,GAAG,CAAC;IACxB,CAAC,CAAC,CAAC;EACL;;;mBAbWR,uBAAuB;AAAA;;SAAvBA,uBAAuB;EAAAe,SAAvBf,uBAAuB;AAAA","names":["throwError","catchError","MessageType","ErrorHandlerInterceptor","constructor","messageBus","intercept","request","next","handle","pipe","err","notifyForMessage","text","error","message","type","Error","factory"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\core\\error-handler.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { MessageBusService, MessageType } from './message-bus.service';\n\n@Injectable()\nexport class ErrorHandlerInterceptor implements HttpInterceptor {\n\n  constructor(private messageBus: MessageBusService) { }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(catchError(err => {\n      this.messageBus.notifyForMessage({\n        text: err?.error?.message || 'Something went wrong!',\n        type: MessageType.Error\n      })\n      // Notify header.\n      return throwError(err);\n    }));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}