{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { MessageType } from '../message-bus.service';\nlet HeaderComponent = class HeaderComponent {\n  constructor(authService, router, messageBus) {\n    this.authService = authService;\n    this.router = router;\n    this.messageBus = messageBus;\n    this.currentUser$ = this.authService.currentUser$;\n    this.isLoggedIn$ = this.authService.isLoggedIn$;\n    this.isLoggingOut = false;\n  }\n  ngOnInit() {\n    this.subscription = this.messageBus.onNewMessage$.subscribe(newMessage => {\n      //console.log('onNewMessage$.subscribe', newMessage);\n      this.message = (newMessage === null || newMessage === void 0 ? void 0 : newMessage.text) || '';\n      this.isMessageError = (newMessage === null || newMessage === void 0 ? void 0 : newMessage.type) === MessageType.Error;\n      if (this.message) {\n        setTimeout(() => {\n          this.messageBus.clear();\n        }, 5000);\n      }\n    });\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  logoutHandler() {\n    if (this.isLoggingOut) {\n      return;\n    }\n    this.isLoggingOut = true;\n    //console.log('logout called');\n    this.authService.logout$().subscribe({\n      next: args => {\n        //console.log(args);\n      },\n      complete: () => {\n        this.isLoggingOut = false;\n        this.router.navigate(['/home']);\n      },\n      error: () => {\n        this.isLoggingOut = false;\n      }\n    });\n  }\n};\nHeaderComponent = __decorate([Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})], HeaderComponent);\nexport { HeaderComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAA2B,eAAe;AAM5D,SAA4BC,WAAW,QAAQ,wBAAwB;AAQhE,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAY1BC,YAAmBC,WAAwB,EAAUC,MAAc,EAAUC,UAA6B;IAAvF,gBAAW,GAAXF,WAAW;IAAuB,WAAM,GAANC,MAAM;IAAkB,eAAU,GAAVC,UAAU;IAVvF,iBAAY,GAAsB,IAAI,CAACF,WAAW,CAACG,YAAY;IAC/D,gBAAW,GAAwB,IAAI,CAACH,WAAW,CAACI,WAAW;IAKvD,iBAAY,GAAY,KAAK;EAKrC;EAEAC,QAAQ;IACN,IAAI,CAACC,YAAY,GAAG,IAAI,CAACJ,UAAU,CAACK,aAAa,CAACC,SAAS,CAACC,UAAU,IAAG;MACvE;MACA,IAAI,CAACC,OAAO,GAAG,WAAU,aAAVD,UAAU,uBAAVA,UAAU,CAAEE,IAAI,KAAI,EAAE;MACrC,IAAI,CAACC,cAAc,GAAG,WAAU,aAAVH,UAAU,uBAAVA,UAAU,CAAEI,IAAI,MAAKhB,WAAW,CAACiB,KAAK;MAE5D,IAAI,IAAI,CAACJ,OAAO,EAAE;QAChBK,UAAU,CAAC,MAAK;UACd,IAAI,CAACb,UAAU,CAACc,KAAK,EAAE;QACzB,CAAC,EAAE,IAAI,CAAC;;IAEZ,CAAC,CAAC;EACJ;EAEAC,WAAW;IACT,IAAI,CAACX,YAAY,CAACY,WAAW,EAAE;EACjC;EAEAC,aAAa;IACX,IAAI,IAAI,CAACC,YAAY,EAAE;MACrB;;IAGF,IAAI,CAACA,YAAY,GAAG,IAAI;IACxB;IAEA,IAAI,CAACpB,WAAW,CAACqB,OAAO,EAAE,CAACb,SAAS,CAAC;MACnCc,IAAI,EAAEC,IAAI,IAAG;QACX;MAAA,CACD;MACDC,QAAQ,EAAE,MAAK;QACb,IAAI,CAACJ,YAAY,GAAG,KAAK;QACzB,IAAI,CAACnB,MAAM,CAACwB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MACjC,CAAC;MACDC,KAAK,EAAE,MAAK;QACV,IAAI,CAACN,YAAY,GAAG,KAAK;MAC3B;KACD,CAAC;EACJ;CACD;AAtDYtB,eAAe,eAL3BF,SAAS,CAAC;EACT+B,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,GACW/B,eAAe,CAsD3B;SAtDYA,eAAe","names":["Component","MessageType","HeaderComponent","constructor","authService","router","messageBus","currentUser$","isLoggedIn$","ngOnInit","subscription","onNewMessage$","subscribe","newMessage","message","text","isMessageError","type","Error","setTimeout","clear","ngOnDestroy","unsubscribe","logoutHandler","isLoggingOut","logout$","next","args","complete","navigate","error","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\core\\header\\header.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthService } from 'src/app/auth.service';\nimport { IUser } from '../interfaces';\nimport { MessageBusService, MessageType } from '../message-bus.service';\nimport { UserService } from '../user.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit, OnDestroy {\n\n  currentUser$: Observable<IUser> = this.authService.currentUser$;\n  isLoggedIn$: Observable<boolean> = this.authService.isLoggedIn$;\n\n  message: string;\n  isMessageError: boolean;\n\n  private isLoggingOut: boolean = false;\n\n  private subscription: Subscription;\n\n  constructor(public authService: AuthService, private router: Router, private messageBus: MessageBusService) {\n  }\n\n  ngOnInit(): void {\n    this.subscription = this.messageBus.onNewMessage$.subscribe(newMessage => {\n      //console.log('onNewMessage$.subscribe', newMessage);\n      this.message = newMessage?.text || '';\n      this.isMessageError = newMessage?.type === MessageType.Error;\n\n      if (this.message) {\n        setTimeout(() => {\n          this.messageBus.clear();\n        }, 5000);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  logoutHandler(): void {\n    if (this.isLoggingOut) {\n      return;\n    }\n\n    this.isLoggingOut = true;\n    //console.log('logout called');\n\n    this.authService.logout$().subscribe({\n      next: args => {\n        //console.log(args);\n      },\n      complete: () => {\n        this.isLoggingOut = false;\n        this.router.navigate(['/home']);\n      },\n      error: () => {\n        this.isLoggingOut = false;\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}