{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { catchError, filter, map, mergeMap, of } from \"rxjs\";\nimport { login } from \"src/app/+store\";\nimport { profileLoaded, profileLoadError, updateProfileCompleted, updateProfileError, updateProfileStarted } from \"./actions\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/core/user.service\";\nexport class ProfileEffects {\n  constructor(actions$, userService) {\n    this.actions$ = actions$;\n    this.userService = userService;\n    this.onProfilePageLoaded$ = createEffect(() => this.actions$.pipe(filter(a => a.type === profilePageInitialize().type), mergeMap(() => this.userService.getProfile$()), map(currentProfile => profileLoaded({\n      profile: currentProfile\n    })), catchError(() => of(profileLoadError()))));\n    this.onProfileUpdateStarted$ = createEffect(() => this.actions$.pipe(ofType(updateProfileStarted), mergeMap(action => this.userService.updateProfile$(action.user).pipe(map(result => updateProfileCompleted({\n      updatedUser: result\n    })), catchError(err => of(updateProfileError({\n      errorMessage: err.error.message\n    })))))));\n    this.onProfileUpdateCompleted$ = createEffect(() => this.actions$.pipe(ofType(updateProfileCompleted), map(result => login({\n      user: result.updatedUser\n    }))));\n  }\n}\nProfileEffects.ɵfac = function ProfileEffects_Factory(t) {\n  return new (t || ProfileEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.UserService));\n};\nProfileEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProfileEffects,\n  factory: ProfileEffects.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAASC,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,EAAE,QAAQ,MAAM;AAC5D,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,SAASC,aAAa,EAAEC,gBAAgB,EAA0BC,sBAAsB,EAAEC,kBAAkB,EAAEC,oBAAoB,QAAQ,WAAW;;;;AAGrJ,OAAM,MAAOC,cAAc;EACvBC,YACYC,QAAiB,EACjBC,WAAwB;IADxB,aAAQ,GAARD,QAAQ;IACR,gBAAW,GAAXC,WAAW;IAGvB,yBAAoB,GAAGhB,YAAY,CAAC,MAChC,IAAI,CAACe,QAAQ,CAACE,IAAI,CACdd,MAAM,CAACe,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAKC,qBAAqB,EAAE,CAACD,IAAI,CAAC,EACpDd,QAAQ,CAAC,MAAM,IAAI,CAACW,WAAW,CAACK,WAAW,EAAE,CAAC,EAC9CjB,GAAG,CAACkB,cAAc,IAAId,aAAa,CAAC;MAAEe,OAAO,EAAED;IAAc,CAAE,CAAC,CAAC,EACjEpB,UAAU,CAAC,MAAMI,EAAE,CAACG,gBAAgB,EAAE,CAAC,CAAC,CAC3C,CACJ;IAED,4BAAuB,GAAGT,YAAY,CAAC,MACnC,IAAI,CAACe,QAAQ,CAACE,IAAI,CACdhB,MAAM,CAACW,oBAAoB,CAAC,EAC5BP,QAAQ,CAACmB,MAAM,IAAI,IAAI,CAACR,WAAW,CAACS,cAAc,CAACD,MAAM,CAACE,IAAI,CAAC,CAC1DT,IAAI,CACDb,GAAG,CAACuB,MAAM,IAAIjB,sBAAsB,CAAC;MAAEkB,WAAW,EAAED;IAAM,CAAE,CAAC,CAAC,EAC9DzB,UAAU,CAAC2B,GAAG,IAAIvB,EAAE,CAACK,kBAAkB,CAAC;MAAEmB,YAAY,EAAED,GAAG,CAACE,KAAK,CAACC;IAAO,CAAE,CAAC,CAAC,CAAC,CACjF,CACJ,CACJ,CACJ;IAED,8BAAyB,GAAGhC,YAAY,CAAC,MAAM,IAAI,CAACe,QAAQ,CAACE,IAAI,CAC7DhB,MAAM,CAACS,sBAAsB,CAAC,EAC9BN,GAAG,CAACuB,MAAM,IAAIpB,KAAK,CAAC;MAAEmB,IAAI,EAAEC,MAAM,CAACC;IAAW,CAAE,CAAC,CAAC,CACrD,CAAC;EA1BE;;;mBAJKf,cAAc;AAAA;;SAAdA,cAAc;EAAAoB,SAAdpB,cAAc;AAAA","names":["createEffect","ofType","catchError","filter","map","mergeMap","of","login","profileLoaded","profileLoadError","updateProfileCompleted","updateProfileError","updateProfileStarted","ProfileEffects","constructor","actions$","userService","pipe","a","type","profilePageInitialize","getProfile$","currentProfile","profile","action","updateProfile$","user","result","updatedUser","err","errorMessage","error","message","factory"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\auth\\+store\\profile.effects.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\nimport { catchError, filter, map, mergeMap, of } from \"rxjs\";\nimport { login } from \"src/app/+store\";\nimport { UserService } from \"src/app/core/user.service\";\nimport { profileLoaded, profileLoadError, profilePageInitialized, updateProfileCompleted, updateProfileError, updateProfileStarted } from \"./actions\";\n\n@Injectable()\nexport class ProfileEffects {\n    constructor(\n        private actions$: Actions,\n        private userService: UserService\n    ) { }\n\n    onProfilePageLoaded$ = createEffect(() =>\n        this.actions$.pipe(\n            filter(a => a.type === profilePageInitialize().type),\n            mergeMap(() => this.userService.getProfile$()),\n            map(currentProfile => profileLoaded({ profile: currentProfile })),\n            catchError(() => of(profileLoadError()))\n        )\n    )\n\n    onProfileUpdateStarted$ = createEffect(() =>\n        this.actions$.pipe(\n            ofType(updateProfileStarted),\n            mergeMap(action => this.userService.updateProfile$(action.user)\n                .pipe(\n                    map(result => updateProfileCompleted({ updatedUser: result })),\n                    catchError(err => of(updateProfileError({ errorMessage: err.error.message })))\n                )\n            )\n        )\n    )\n\n    onProfileUpdateCompleted$ = createEffect(() => this.actions$.pipe(\n        ofType(updateProfileCompleted),\n        map(result => login({ user: result.updatedUser }))\n    ))\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}