{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MessageType } from 'src/app/core/message-bus.service';\nimport { emailValidator, nameValidator, passwordMatch } from '../util';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"src/app/core/message-bus.service\";\nimport * as i5 from \"@angular/common\";\nfunction RegisterComponent_ng_container_6_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 12);\n    i0.ɵɵtext(1, \" Username is required! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_ng_container_6_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 12);\n    i0.ɵɵtext(1, \" Username must be at least 5 characters! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_ng_container_6_p_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 12);\n    i0.ɵɵtext(1, \" Username is not valid! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, RegisterComponent_ng_container_6_p_1_Template, 2, 0, \"p\", 11);\n    i0.ɵɵtemplate(2, RegisterComponent_ng_container_6_p_2_Template, 2, 0, \"p\", 11);\n    i0.ɵɵtemplate(3, RegisterComponent_ng_container_6_p_3_Template, 2, 0, \"p\", 11);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.registerFormGroup.controls[\"username\"].errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.registerFormGroup.controls[\"username\"].errors.minlength);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.registerFormGroup.controls[\"username\"].errors.username);\n  }\n}\nfunction RegisterComponent_ng_container_9_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 12);\n    i0.ɵɵtext(1, \" Email is required! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_ng_container_9_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 12);\n    i0.ɵɵtext(1, \" Email is not valid! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, RegisterComponent_ng_container_9_p_1_Template, 2, 0, \"p\", 11);\n    i0.ɵɵtemplate(2, RegisterComponent_ng_container_9_p_2_Template, 2, 0, \"p\", 11);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.registerFormGroup.controls[\"email\"].errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.registerFormGroup.controls[\"email\"].errors.email);\n  }\n}\nfunction RegisterComponent_ng_container_13_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 12);\n    i0.ɵɵtext(1, \" Password is required! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_ng_container_13_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 12);\n    i0.ɵɵtext(1, \" Password must be at least 5 characters! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_ng_container_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, RegisterComponent_ng_container_13_p_1_Template, 2, 0, \"p\", 11);\n    i0.ɵɵtemplate(2, RegisterComponent_ng_container_13_p_2_Template, 2, 0, \"p\", 11);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.passwordsGroup.controls[\"password\"].errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.passwordsGroup.controls.password.errors.minlength);\n  }\n}\nfunction RegisterComponent_ng_container_16_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 12);\n    i0.ɵɵtext(1, \"Repeat Password does not match password!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_ng_container_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, RegisterComponent_ng_container_16_p_1_Template, 2, 0, \"p\", 11);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.passwordsGroup.controls[\"rePassword\"].errors.passwordMissmatch);\n  }\n}\nexport class RegisterComponent {\n  constructor(formBuilder, authService, router, messageBus) {\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.router = router;\n    this.messageBus = messageBus;\n    this.errorMessage = '';\n    this.passwordControl = new FormControl(null, [Validators.required, Validators.minLength(5)]);\n    this.registerFormGroup = this.formBuilder.group({\n      'username': new FormControl(null, [Validators.required, Validators.minLength(5), nameValidator]),\n      'email': new FormControl(null, [Validators.required, emailValidator]),\n      'passwords': new FormGroup({\n        'password': this.passwordControl,\n        'rePassword': new FormControl(null, [passwordMatch(this.passwordControl)])\n      })\n    });\n  }\n  get passwordsGroup() {\n    return this.registerFormGroup.controls['passwords'];\n  }\n  ngOnInit() {}\n  shouldShowErrorForControl(controlName, sourceGroup = this.registerFormGroup) {\n    return sourceGroup.controls[controlName].touched && sourceGroup.controls[controlName].invalid;\n  }\n  handleRegister() {\n    const {\n      username,\n      email,\n      passwords\n    } = this.registerFormGroup.value;\n    const body = {\n      username: username,\n      email: email,\n      password: passwords.password\n      // ...(tel && { tel: telRegion + tel})\n    };\n\n    this.authService.register$(body).subscribe({\n      next: user => {\n        this.router.navigate(['/home']);\n        this.messageBus.notifyForMessage({\n          text: 'User successfully register!',\n          type: MessageType.Success\n        });\n      },\n      complete: () => {\n        // console.log('register stream completed');\n      },\n      error: err => {\n        // console.log('Error is ', err.error.message)\n        this.errorMessage = err.error.message;\n      }\n    });\n    // this.authService.register$(body).subscribe(() => {\n    //   this.router.navigate(['/home']);\n    //   this.messageBus.notifyForMessage({\n    //     text: 'User successfully register!',\n    //     type: MessageType.Success\n    //   })\n    // }, complete: () => {\n    //   // console.log('register stream completed');\n    // }, error: (err) => {\n    //   // console.log('Error is ', err.error.message)\n    //   this.errorMessage = err.error.message;\n    // })\n  }\n}\n\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.MessageBusService));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 23,\n  vars: 12,\n  consts: [[1, \"register\", 3, \"formGroup\", \"ngSubmit\"], [1, \"field\", \"field-icon\"], [\"formControlName\", \"username\", \"type\", \"text\", \"name\", \"username\", \"id\", \"username\", \"placeholder\", \"Johny\"], [4, \"ngIf\"], [\"formControlName\", \"email\", \"type\", \"email\", \"name\", \"email\", \"id\", \"email\", \"placeholder\", \"john.doe@gmail.com\"], [\"formGroupName\", \"passwords\"], [\"formControlName\", \"password\", \"type\", \"password\", \"name\", \"password\", \"id\", \"password\", \"placeholder\", \"******\"], [\"formControlName\", \"rePassword\", \"type\", \"password\", \"name\", \"rePassword\", \"id\", \"rePassword\", \"placeholder\", \"******\"], [3, \"disabled\"], [1, \"text-center\"], [\"href\", \"/login\"], [\"class\", \"error\", 4, \"ngIf\"], [1, \"error\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.handleRegister();\n      });\n      i0.ɵɵelementStart(1, \"fieldset\")(2, \"h2\");\n      i0.ɵɵtext(3, \"Registration Form\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"p\", 1);\n      i0.ɵɵelement(5, \"input\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, RegisterComponent_ng_container_6_Template, 4, 3, \"ng-container\", 3);\n      i0.ɵɵelementStart(7, \"p\", 1);\n      i0.ɵɵelement(8, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(9, RegisterComponent_ng_container_9_Template, 3, 2, \"ng-container\", 3);\n      i0.ɵɵelementStart(10, \"div\", 5)(11, \"p\", 1);\n      i0.ɵɵelement(12, \"input\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(13, RegisterComponent_ng_container_13_Template, 3, 2, \"ng-container\", 3);\n      i0.ɵɵelementStart(14, \"p\", 1);\n      i0.ɵɵelement(15, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(16, RegisterComponent_ng_container_16_Template, 2, 1, \"ng-container\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"button\", 8);\n      i0.ɵɵtext(18, \"Create Account\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"p\", 9);\n      i0.ɵɵtext(20, \" Have an account? \");\n      i0.ɵɵelementStart(21, \"a\", 10);\n      i0.ɵɵtext(22, \"Log In\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.registerFormGroup);\n      i0.ɵɵadvance(5);\n      i0.ɵɵclassProp(\"input-error\", ctx.registerFormGroup.controls[\"username\"].touched && ctx.registerFormGroup.controls[\"username\"].invalid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.registerFormGroup.controls[\"username\"].touched && ctx.registerFormGroup.controls[\"username\"].invalid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"input-error\", ctx.shouldShowErrorForControl(\"email\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.shouldShowErrorForControl(\"email\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵclassProp(\"input-error\", ctx.shouldShowErrorForControl(\"password\", ctx.passwordsGroup));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.shouldShowErrorForControl(\"password\", ctx.passwordsGroup));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.shouldShowErrorForControl(\"rePassword\", ctx.passwordsGroup));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.registerFormGroup.invalid);\n    }\n  },\n  dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName],\n  styles: [\"form[_ngcontent-%COMP%] {\\n    width: 500px;\\n    margin: 50px auto;\\n    text-align: center;\\n    height: 60vh;\\n}\\n\\n .register[_ngcontent-%COMP%]   fieldset[_ngcontent-%COMP%] {\\n    border-radius: 8px;\\n    padding: 10px;\\n    background-color: #ffffff;\\n}\\n\\n .register[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%] {\\n    padding-top: 0;\\n    border-bottom: none;\\n}\\n .register[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n    padding-bottom: 0;\\n    padding-top: 10px;\\n    margin: 20px;\\n}\\n\\n .register[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\n    flex: 0 1 100%;\\n    border: 1px solid;\\n    padding: 10px;\\n    border-left: 4px solid green;\\n    border-top-right-radius: 4px;\\n    border-bottom-right-radius: 4px;\\n}\\n\\n .register[_ngcontent-%COMP%]   select[_ngcontent-%COMP%] {\\n    border-color: black;\\n}\\n\\n .register[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n    color: white;\\n    border: none;\\n    border-radius: 0.3em;\\n    padding: 0.6em 1.2em;\\n    margin-top: 1.5rem;\\n    width: 60%;\\n    outline: none;\\n}\\n\\n .register[_ngcontent-%COMP%]   i[_ngcontent-%COMP%] {\\n    border: 1px solid;\\n    border-right: none;\\n    padding: 0.55em;\\n    border-top-left-radius: 0.3em;\\n    border-bottom-left-radius: 0.3em;\\n    background-color: #e9ecef;\\n}\\n\\n .register[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\\n    color: #007bff;\\n}\\n\\n .register[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover {\\n    cursor: pointer;\\n}\\n\\n\\n\\n.register[_ngcontent-%COMP%]   .field[_ngcontent-%COMP%] {\\n    display: flex;\\n    padding-bottom: 0;\\n}\\n\\n\\n\\np.error[_ngcontent-%COMP%] {\\n    text-align: left;\\n    border-radius: 0.3em;\\n    color: red;\\n    padding-top: 0;\\n}\\n\\n.register[_ngcontent-%COMP%]   .input-error[_ngcontent-%COMP%] {\\n    border-left-color: red;\\n}\\n/*# sourceURL=webpack://./src/app/auth/register/register.component.css */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXV0aC9yZWdpc3Rlci9yZWdpc3Rlci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlCQUF5Qjs7QUFFekI7SUFDSSxZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixZQUFZO0FBQ2hCOztDQUVDO0lBQ0csa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYix5QkFBeUI7QUFDN0I7O0NBRUM7SUFDRyxjQUFjO0lBQ2QsbUJBQW1CO0FBQ3ZCO0NBQ0M7SUFDRyxpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLFlBQVk7QUFDaEI7O0NBRUM7SUFDRyxjQUFjO0lBQ2QsaUJBQWlCO0lBQ2pCLGFBQWE7SUFDYiw0QkFBNEI7SUFDNUIsNEJBQTRCO0lBQzVCLCtCQUErQjtBQUNuQzs7Q0FFQztJQUNHLG1CQUFtQjtBQUN2Qjs7Q0FFQztJQUNHLFlBQVk7SUFDWixZQUFZO0lBQ1osb0JBQW9CO0lBQ3BCLG9CQUFvQjtJQUNwQixrQkFBa0I7SUFDbEIsVUFBVTtJQUNWLGFBQWE7QUFDakI7O0NBRUM7SUFDRyxpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLGVBQWU7SUFDZiw2QkFBNkI7SUFDN0IsZ0NBQWdDO0lBQ2hDLHlCQUF5QjtBQUM3Qjs7Q0FFQztJQUNHLGNBQWM7QUFDbEI7O0NBRUM7SUFDRyxlQUFlO0FBQ25COzs7O0FBSUE7SUFDSSxhQUFhO0lBQ2IsaUJBQWlCO0FBQ3JCOztBQUVBLFlBQVk7O0FBRVo7SUFDSSxnQkFBZ0I7SUFDaEIsb0JBQW9CO0lBQ3BCLFVBQVU7SUFDVixjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksc0JBQXNCO0FBQzFCIiwic291cmNlc0NvbnRlbnQiOlsiLypsb2dpbiByZWdpc3RlciBmb3JtcyAgKi9cblxuZm9ybSB7XG4gICAgd2lkdGg6IDUwMHB4O1xuICAgIG1hcmdpbjogNTBweCBhdXRvO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBoZWlnaHQ6IDYwdmg7XG59XG5cbiAucmVnaXN0ZXIgZmllbGRzZXQge1xuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG59XG5cbiAucmVnaXN0ZXIgaDIge1xuICAgIHBhZGRpbmctdG9wOiAwO1xuICAgIGJvcmRlci1ib3R0b206IG5vbmU7XG59XG4gLnJlZ2lzdGVyIHAge1xuICAgIHBhZGRpbmctYm90dG9tOiAwO1xuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIG1hcmdpbjogMjBweDtcbn1cblxuIC5yZWdpc3RlciBpbnB1dCB7XG4gICAgZmxleDogMCAxIDEwMCU7XG4gICAgYm9yZGVyOiAxcHggc29saWQ7XG4gICAgcGFkZGluZzogMTBweDtcbiAgICBib3JkZXItbGVmdDogNHB4IHNvbGlkIGdyZWVuO1xuICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA0cHg7XG4gICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDRweDtcbn1cblxuIC5yZWdpc3RlciBzZWxlY3Qge1xuICAgIGJvcmRlci1jb2xvcjogYmxhY2s7XG59XG5cbiAucmVnaXN0ZXIgYnV0dG9uIHtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIGJvcmRlci1yYWRpdXM6IDAuM2VtO1xuICAgIHBhZGRpbmc6IDAuNmVtIDEuMmVtO1xuICAgIG1hcmdpbi10b3A6IDEuNXJlbTtcbiAgICB3aWR0aDogNjAlO1xuICAgIG91dGxpbmU6IG5vbmU7XG59XG5cbiAucmVnaXN0ZXIgaSB7XG4gICAgYm9yZGVyOiAxcHggc29saWQ7XG4gICAgYm9yZGVyLXJpZ2h0OiBub25lO1xuICAgIHBhZGRpbmc6IDAuNTVlbTtcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwLjNlbTtcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwLjNlbTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmO1xufVxuXG4gLnJlZ2lzdGVyIGEge1xuICAgIGNvbG9yOiAjMDA3YmZmO1xufVxuXG4gLnJlZ2lzdGVyIGE6aG92ZXIge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuXG5cbi5yZWdpc3RlciAuZmllbGQge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgcGFkZGluZy1ib3R0b206IDA7XG59XG5cbi8qIGVycm9ycyAgKi9cblxucC5lcnJvciB7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICBib3JkZXItcmFkaXVzOiAwLjNlbTtcbiAgICBjb2xvcjogcmVkO1xuICAgIHBhZGRpbmctdG9wOiAwO1xufVxuXG4ucmVnaXN0ZXIgLmlucHV0LWVycm9yIHtcbiAgICBib3JkZXItbGVmdC1jb2xvcjogcmVkO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","MessageType","emailValidator","nameValidator","passwordMatch","i0","RegisterComponent","constructor","formBuilder","authService","router","messageBus","required","minLength","group","passwordControl","passwordsGroup","registerFormGroup","controls","ngOnInit","shouldShowErrorForControl","controlName","sourceGroup","touched","invalid","handleRegister","username","email","passwords","value","body","password","register$","subscribe","next","user","navigate","notifyForMessage","text","type","Success","complete","error","err","errorMessage","message","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\auth\\register\\register.component.ts","D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\auth\\register\\register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/auth.service';\nimport { CreateUserDto, UserService } from 'src/app/core/user.service';\nimport { MessageBusService, MessageType } from 'src/app/core/message-bus.service';\nimport { emailValidator, nameValidator, passwordMatch, passwordMatch2 } from '../util';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  errorMessage: string = '';\n  passwordControl = new FormControl(null, [Validators.required, Validators.minLength(5)]);\n\n  get passwordsGroup(): FormGroup {\n    return this.registerFormGroup.controls['passwords'] as FormGroup;\n  }\n\n  registerFormGroup: FormGroup = this.formBuilder.group({\n    'username': new FormControl(null, [Validators.required, Validators.minLength(5), nameValidator]),\n    'email': new FormControl(null, [Validators.required, emailValidator]),\n    'passwords': new FormGroup({\n      'password': this.passwordControl,\n      'rePassword': new FormControl(null, [passwordMatch(this.passwordControl)]),\n    })\n\n  })\n\n  constructor(private formBuilder: FormBuilder, private authService: AuthService, private router: Router,   private messageBus: MessageBusService) { }\n\n  ngOnInit(): void {\n  }\n\n  shouldShowErrorForControl(controlName: string, sourceGroup: FormGroup = this.registerFormGroup) {\n    return sourceGroup.controls[controlName].touched && sourceGroup.controls[controlName].invalid\n  }\n\n  handleRegister(): void {\n    const { username, email, passwords } = this.registerFormGroup.value;\n\n    const body: CreateUserDto = {\n      username: username,\n      email: email,\n      password: passwords.password,\n      // ...(tel && { tel: telRegion + tel})\n    }\n\n    this.authService.register$(body).subscribe({\n      next: user => {\n        this.router.navigate(['/home']);\n\n        this.messageBus.notifyForMessage({\n          text: 'User successfully register!',\n          type: MessageType.Success\n        })\n      },\n      complete: () => {\n        // console.log('register stream completed');\n      },\n      error: (err) => {\n        // console.log('Error is ', err.error.message)\n        this.errorMessage = err.error.message;\n      }\n    })\n\n    // this.authService.register$(body).subscribe(() => {\n    //   this.router.navigate(['/home']);\n    //   this.messageBus.notifyForMessage({\n    //     text: 'User successfully register!',\n    //     type: MessageType.Success\n    //   })\n    // }, complete: () => {\n    //   // console.log('register stream completed');\n    // }, error: (err) => {\n    //   // console.log('Error is ', err.error.message)\n    //   this.errorMessage = err.error.message;\n    // })\n  }\n}\n","<form class=\"register\" [formGroup]=\"registerFormGroup\" (ngSubmit)=\"handleRegister()\">\n\n    <fieldset>\n        <h2>Registration Form</h2>\n\n        <!-- username -->\n        <p class=\"field field-icon\">\n            <!-- <label for=\"username\"><span><i class=\"fas fa-user\"></i></span></label> -->\n            <input formControlName=\"username\"\n                [class.input-error]=\"registerFormGroup.controls['username'].touched && registerFormGroup.controls['username'].invalid\"\n                type=\"text\" name=\"username\" id=\"username\" placeholder=\"Johny\">\n        </p>\n\n        <ng-container\n            *ngIf=\"registerFormGroup.controls['username'].touched && registerFormGroup.controls['username'].invalid\">\n            <p *ngIf=\"registerFormGroup.controls['username'].errors.required\" class=\"error\">\n                Username is required!\n            </p>\n            <p *ngIf=\"registerFormGroup.controls['username'].errors.minlength\" class=\"error\">\n                Username must be at least 5 characters!\n            </p>\n            <p *ngIf=\"registerFormGroup.controls['username'].errors.username\" class=\"error\">\n                Username is not valid!\n            </p>\n        </ng-container>\n\n\n\n        <!-- email -->\n        <p class=\"field field-icon\">\n            <!-- <label for=\"email\"><span><i class=\"fas fa-envelope\"></i></span></label> -->\n            <input formControlName=\"email\" type=\"email\" name=\"email\" id=\"email\" placeholder=\"john.doe@gmail.com\"\n                [class.input-error]=\"shouldShowErrorForControl('email')\">\n        </p>\n\n        <ng-container\n            *ngIf=\"shouldShowErrorForControl('email')\">\n            <p *ngIf=\"registerFormGroup.controls['email'].errors.required\" class=\"error\">\n                Email is required!\n            </p>\n            <p *ngIf=\"registerFormGroup.controls['email'].errors.email\" class=\"error\">\n                Email is not valid!\n            </p>\n        </ng-container>\n\n        <!-- password -->\n\n        <div formGroupName=\"passwords\">\n            <p class=\"field field-icon\">\n                <!-- <label for=\"password\"><span><i class=\"fas fa-lock\"></i></span></label> -->\n                <input [class.input-error]=\"shouldShowErrorForControl('password', passwordsGroup)\" formControlName=\"password\" type=\"password\" name=\"password\" id=\"password\" placeholder=\"******\">\n            </p>\n            \n            <ng-container *ngIf=\"shouldShowErrorForControl('password', passwordsGroup)\">\n                <p *ngIf=\"passwordsGroup.controls['password'].errors.required\" class=\"error\">\n                    Password is required!\n                </p>\n                <p *ngIf=\"passwordsGroup.controls.password.errors.minlength\"  class=\"error\">\n                    Password must be at least 5 characters!\n                </p>\n            </ng-container>\n\n\n            <!-- rePassword -->\n            <p class=\"field field-icon\">\n                <!-- <label for=\"rePassword\"><span><i class=\"fas fa-lock\"></i></span></label> -->\n                <input formControlName=\"rePassword\" type=\"password\" name=\"rePassword\" id=\"rePassword\"\n                    placeholder=\"******\">\n            </p>\n\n            <ng-container *ngIf=\"shouldShowErrorForControl('rePassword', passwordsGroup)\">\n                <p *ngIf=\"passwordsGroup.controls['rePassword'].errors.passwordMissmatch\" class=\"error\">Repeat Password does not match password!</p>\n            </ng-container>\n        </div>\n\n        <button [disabled]=\"registerFormGroup.invalid\">Create Account</button>\n\n        <p class=\"text-center\">\n            Have an account?\n            <a href=\"/login\">Log In</a>\n        </p>\n\n    </fieldset>\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}