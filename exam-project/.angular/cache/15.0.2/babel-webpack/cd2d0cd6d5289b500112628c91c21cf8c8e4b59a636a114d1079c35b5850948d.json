{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TimeAgoPipe {\n  constructor() {\n    this.now = new Date();\n  }\n  transform(value) {\n    const then = new Date(value);\n    const timePassed = this.now.getTime() - then.getTime();\n    const miliseconds = 1000;\n    const minute = 60 * 1000;\n    const hour = 60 * minute;\n    const day = 24 * hour;\n    const month = 30 * day;\n    const year = 365 * day;\n    // console.log(timePassed);\n    // 1min = 60 * 1000\n    // 1hour = 60 * 60 * 1000\n    // 1day = 24 * 60 * 60 * 1000\n    // 1month = 30 * 24 * 60 * 60 * 1000\n    // 1year = 365 * 24 * 60 * 60 * 1000\n    // const secondsInMinute = 60;\n    // if (timePassed < 60 * miliseconds) {\n    //   return `${Math.floor(timePassed / 60)} seconds`;\n    // }\n    if (timePassed < minute) {\n      return `${Math.floor(timePassed / miliseconds)} seconds`;\n    }\n    if (timePassed < hour) {\n      return `${Math.floor(timePassed / minute)} minutes`;\n    }\n    if (timePassed < day) {\n      return `${Math.floor(timePassed / hour)} hours`;\n    }\n    if (timePassed < month) {\n      return `${Math.floor(timePassed / day)} days`;\n    }\n    if (timePassed < year) {\n      return `${Math.floor(timePassed / month)} month`;\n    }\n    return `${Math.floor(timePassed / year)} years`;\n  }\n}\nTimeAgoPipe.ɵfac = function TimeAgoPipe_Factory(t) {\n  return new (t || TimeAgoPipe)();\n};\nTimeAgoPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"timeAgo\",\n  type: TimeAgoPipe,\n  pure: true\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,WAAW;EAHxBC;IAKU,QAAG,GAAG,IAAIC,IAAI,EAAE;;EAExBC,SAAS,CAACC,KAAa;IACrB,MAAMC,IAAI,GAAG,IAAIH,IAAI,CAACE,KAAK,CAAC;IAE5B,MAAME,UAAU,GAAG,IAAI,CAACC,GAAG,CAACC,OAAO,EAAE,GAAGH,IAAI,CAACG,OAAO,EAAE;IACtD,MAAMC,WAAW,GAAG,IAAI;IACxB,MAAMC,MAAM,GAAG,EAAE,GAAG,IAAI;IACxB,MAAMC,IAAI,GAAG,EAAE,GAAGD,MAAM;IACxB,MAAME,GAAG,GAAG,EAAE,GAAGD,IAAI;IACrB,MAAME,KAAK,GAAG,EAAE,GAAGD,GAAG;IACtB,MAAME,IAAI,GAAG,GAAG,GAAGF,GAAG;IACtB;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA,IAAIN,UAAU,GAAGI,MAAM,EAAE;MACvB,OAAO,GAAGK,IAAI,CAACC,KAAK,CAACV,UAAU,GAAGG,WAAW,CAAC,UAAU;;IAG1D,IAAIH,UAAU,GAAGK,IAAI,EAAE;MACrB,OAAO,GAAGI,IAAI,CAACC,KAAK,CAACV,UAAU,GAAGI,MAAM,CAAC,UAAU;;IAGrD,IAAIJ,UAAU,GAAGM,GAAG,EAAE;MACpB,OAAO,GAAGG,IAAI,CAACC,KAAK,CAACV,UAAU,GAAGK,IAAI,CAAC,QAAQ;;IAGjD,IAAIL,UAAU,GAAGO,KAAK,EAAE;MACtB,OAAO,GAAGE,IAAI,CAACC,KAAK,CAACV,UAAU,GAAGM,GAAG,CAAC,OAAO;;IAG/C,IAAIN,UAAU,GAAGQ,IAAI,EAAE;MACrB,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACV,UAAU,GAAGO,KAAK,CAAC,QAAQ;;IAGlD,OAAO,GAAGE,IAAI,CAACC,KAAK,CAACV,UAAU,GAAGQ,IAAI,CAAC,QAAQ;EACjD;;;mBA/CWd,WAAW;AAAA;;;QAAXA,WAAW;EAAAiB;AAAA","names":["TimeAgoPipe","constructor","Date","transform","value","then","timePassed","now","getTime","miliseconds","minute","hour","day","month","year","Math","floor","pure"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\shared\\time-ago.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'timeAgo'\n})\nexport class TimeAgoPipe implements PipeTransform {\n\n  private now = new Date();\n\n  transform(value: string): string {\n    const then = new Date(value);\n\n    const timePassed = this.now.getTime() - then.getTime();\n    const miliseconds = 1000;\n    const minute = 60 * 1000;\n    const hour = 60 * minute;\n    const day = 24 * hour;\n    const month = 30 * day;\n    const year = 365 * day;\n    // console.log(timePassed);\n\n    // 1min = 60 * 1000\n    // 1hour = 60 * 60 * 1000\n    // 1day = 24 * 60 * 60 * 1000\n    // 1month = 30 * 24 * 60 * 60 * 1000\n    // 1year = 365 * 24 * 60 * 60 * 1000\n    // const secondsInMinute = 60;\n    // if (timePassed < 60 * miliseconds) {\n    //   return `${Math.floor(timePassed / 60)} seconds`;\n    // }\n\n    if (timePassed < minute) {\n      return `${Math.floor(timePassed / miliseconds)} seconds`;\n    }\n\n    if (timePassed < hour) {\n      return `${Math.floor(timePassed / minute)} minutes`;\n    }\n\n    if (timePassed < day) {\n      return `${Math.floor(timePassed / hour)} hours`;\n    }\n\n    if (timePassed < month) {\n      return `${Math.floor(timePassed / day)} days`;\n    }\n\n    if (timePassed < year) {\n      return `${Math.floor(timePassed / month)} month`;\n    }\n\n    return `${Math.floor(timePassed / year)} years`;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}