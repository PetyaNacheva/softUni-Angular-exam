{"ast":null,"code":"import { map, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/auth.service\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    //console.log(route, state);\n    return this.authService.isLoggedIn$.pipe(take(1), map(isLoggedIn => {\n      if (isLoggedIn) {\n        return true;\n      }\n      return this.router.createUrlTree(['/user/login'], {\n        queryParams: {\n          'redirect-to': '/' + route.url.map(f => f.path).join('/')\n        }\n      });\n    }));\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAgBA,GAAG,EAAEC,IAAI,QAAQ,gBAAgB;;;AAOjD,OAAM,MAAOC,SAAS;EAEpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAY;EAExEC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE;IACA,OAAO,IAAI,CAACJ,WAAW,CAACK,WAAW,CAACC,IAAI,CAACT,IAAI,CAAC,CAAC,CAAC,EAAED,GAAG,CAACW,UAAU,IAAG;MACjE,IAAIA,UAAU,EAAE;QACd,OAAO,IAAI;;MAGb,OAAO,IAAI,CAACN,MAAM,CAACO,aAAa,CAAC,CAAC,aAAa,CAAC,EAAE;QAChDC,WAAW,EAAE;UACX,aAAa,EAAE,GAAG,GAAGN,KAAK,CAACO,GAAG,CAACd,GAAG,CAACe,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAACC,IAAI,CAAC,GAAG;;OAE3D,CAAC;IACJ,CAAC,CAAC,CAAC;EACL;;;;;;SAjBWf,SAAS;EAAAgB,SAAThB,SAAS;EAAAiB,YAFR;AAAM","names":["map","take","AuthGuard","constructor","authService","router","canActivate","route","state","isLoggedIn$","pipe","isLoggedIn","createUrlTree","queryParams","url","f","path","join","factory","providedIn"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\core\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { first, map, take } from 'rxjs/operators';\nimport { AuthService } from 'src/app/auth.service';\nimport { UserService } from '../user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> {\n    //console.log(route, state);\n    return this.authService.isLoggedIn$.pipe(take(1), map(isLoggedIn => {\n      if (isLoggedIn) {\n        return true;\n      }\n\n      return this.router.createUrlTree(['/user/login'], {\n        queryParams: {\n          'redirect-to': '/' + route.url.map(f => f.path).join('/')\n        }\n      });\n    }))\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}