{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { emailValidator, nameValidator, passwordMatch } from '../util';\nlet RegisterComponent = class RegisterComponent {\n  constructor(formBuilder, authService, router) {\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.router = router;\n    this.passwordControl = new FormControl(null, [Validators.required, Validators.minLength(5)]);\n    this.registerFormGroup = this.formBuilder.group({\n      'username': new FormControl(null, [Validators.required, Validators.minLength(5), nameValidator]),\n      'email': new FormControl(null, [Validators.required, emailValidator]),\n      'passwords': new FormGroup({\n        'password': this.passwordControl,\n        'rePassword': new FormControl(null, [passwordMatch(this.passwordControl)])\n      })\n    });\n  }\n  get passwordsGroup() {\n    return this.registerFormGroup.controls['passwords'];\n  }\n  ngOnInit() {}\n  shouldShowErrorForControl(controlName, sourceGroup = this.registerFormGroup) {\n    return sourceGroup.controls[controlName].touched && sourceGroup.controls[controlName].invalid;\n  }\n  handleRegister() {\n    const {\n      username,\n      email,\n      passwords\n    } = this.registerFormGroup.value;\n    const body = {\n      username: username,\n      email: email,\n      password: passwords.password\n      // ...(tel && { tel: telRegion + tel})\n    };\n\n    this.authService.register$(body).subscribe(() => {\n      this.router.navigate(['/home']);\n    });\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAsBC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAIhF,SAASC,cAAc,EAAEC,aAAa,EAAEC,aAAa,QAAwB,SAAS;AAO/E,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAkB5BC,YAAoBC,WAAwB,EAAUC,WAAwB,EAAUC,MAAc;IAAlF,gBAAW,GAAXF,WAAW;IAAuB,gBAAW,GAAXC,WAAW;IAAuB,WAAM,GAANC,MAAM;IAhB9F,oBAAe,GAAG,IAAIV,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACU,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IAMvF,sBAAiB,GAAc,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MACpD,UAAU,EAAE,IAAIb,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACU,SAAS,CAAC,CAAC,CAAC,EAAER,aAAa,CAAC,CAAC;MAChG,OAAO,EAAE,IAAIJ,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACS,QAAQ,EAAER,cAAc,CAAC,CAAC;MACrE,WAAW,EAAE,IAAIF,SAAS,CAAC;QACzB,UAAU,EAAE,IAAI,CAACa,eAAe;QAChC,YAAY,EAAE,IAAId,WAAW,CAAC,IAAI,EAAE,CAACK,aAAa,CAAC,IAAI,CAACS,eAAe,CAAC,CAAC;OAC1E;KAEF,CAAC;EAEwG;EAd1G,IAAIC,cAAc;IAChB,OAAO,IAAI,CAACC,iBAAiB,CAACC,QAAQ,CAAC,WAAW,CAAc;EAClE;EAcAC,QAAQ,IACR;EAEAC,yBAAyB,CAACC,WAAmB,EAAEC,cAAyB,IAAI,CAACL,iBAAiB;IAC5F,OAAOK,WAAW,CAACJ,QAAQ,CAACG,WAAW,CAAC,CAACE,OAAO,IAAID,WAAW,CAACJ,QAAQ,CAACG,WAAW,CAAC,CAACG,OAAO;EAC/F;EAEAC,cAAc;IACZ,MAAM;MAAEC,QAAQ;MAAEC,KAAK;MAAEC;IAAS,CAAE,GAAG,IAAI,CAACX,iBAAiB,CAACY,KAAK;IAEnE,MAAMC,IAAI,GAAkB;MAC1BJ,QAAQ,EAAEA,QAAQ;MAClBC,KAAK,EAAEA,KAAK;MACZI,QAAQ,EAAEH,SAAS,CAACG;MACpB;KACD;;IAGD,IAAI,CAACrB,WAAW,CAACsB,SAAS,CAACF,IAAI,CAAC,CAACG,SAAS,CAAC,MAAK;MAC9C,IAAI,CAACtB,MAAM,CAACuB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC,CAAC;EACJ;CACD;AA1CY3B,iBAAiB,eAL7BP,SAAS,CAAC;EACTmC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACW9B,iBAAiB,CA0C7B;SA1CYA,iBAAiB","names":["Component","FormControl","FormGroup","Validators","emailValidator","nameValidator","passwordMatch","RegisterComponent","constructor","formBuilder","authService","router","required","minLength","group","passwordControl","passwordsGroup","registerFormGroup","controls","ngOnInit","shouldShowErrorForControl","controlName","sourceGroup","touched","invalid","handleRegister","username","email","passwords","value","body","password","register$","subscribe","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\auth\\register\\register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/auth.service';\nimport { CreateUserDto, UserService } from 'src/app/core/user.service';\nimport { emailValidator, nameValidator, passwordMatch, passwordMatch2 } from '../util';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  passwordControl = new FormControl(null, [Validators.required, Validators.minLength(5)]);\n\n  get passwordsGroup(): FormGroup {\n    return this.registerFormGroup.controls['passwords'] as FormGroup;\n  }\n\n  registerFormGroup: FormGroup = this.formBuilder.group({\n    'username': new FormControl(null, [Validators.required, Validators.minLength(5), nameValidator]),\n    'email': new FormControl(null, [Validators.required, emailValidator]),\n    'passwords': new FormGroup({\n      'password': this.passwordControl,\n      'rePassword': new FormControl(null, [passwordMatch(this.passwordControl)]),\n    })\n\n  })\n\n  constructor(private formBuilder: FormBuilder, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  shouldShowErrorForControl(controlName: string, sourceGroup: FormGroup = this.registerFormGroup) {\n    return sourceGroup.controls[controlName].touched && sourceGroup.controls[controlName].invalid\n  }\n\n  handleRegister(): void {\n    const { username, email, passwords } = this.registerFormGroup.value;\n\n    const body: CreateUserDto = {\n      username: username,\n      email: email,\n      password: passwords.password,\n      // ...(tel && { tel: telRegion + tel})\n    }\n\n\n    this.authService.register$(body).subscribe(() => {\n      this.router.navigate(['/home']);\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}