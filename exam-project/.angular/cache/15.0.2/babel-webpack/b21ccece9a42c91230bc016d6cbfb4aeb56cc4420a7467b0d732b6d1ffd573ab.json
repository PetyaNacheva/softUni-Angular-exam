{"ast":null,"code":"import { createReducer, on } from \"@ngrx/store\";\nimport { enterEditMode, exitEditMode, initializeLoginState, loginProcessError, profileLoaded, profileLoadError, startLoginProcess, updateProfileCompleted, updateProfileError } from \"./actions\";\nexport const profileReducer = createReducer({\n  currentProfile: undefined,\n  isInEditMode: false,\n  errorHappened: false\n}, on(profileLoaded, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    currentProfile: action.profile\n  });\n}), on(enterEditMode, state => {\n  return Object.assign(Object.assign({}, state), {\n    isInEditMode: true\n  });\n}), on(exitEditMode, state => {\n  return Object.assign(Object.assign({}, state), {\n    isInEditMode: false\n  });\n}), on(profileLoadError, state => {\n  return Object.assign(Object.assign({}, state), {\n    errorHappened: true\n  });\n}),\n// The below 2 action handlings were added offline.\non(updateProfileError, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    errorMessage: action.errorMessage\n  });\n}), on(updateProfileCompleted, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    isInEditMode: false,\n    currentProfile: action.updatedUser\n  });\n})\n// End offline edit.\n);\n\nconst loginInitialState = {\n  errorMessage: '',\n  isLoginPending: false\n};\nexport const loginReducer = createReducer(loginInitialState, on(startLoginProcess, state => {\n  return Object.assign(Object.assign({}, state), {\n    isLoginPending: true,\n    errorMessage: ''\n  });\n}), on(loginProcessError, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    isLoginPending: false,\n    errorMessage: action.errorMessage\n  });\n}), on(initializeLoginState, () => {\n  return loginInitialState;\n}));","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,EAAEC,EAAE,QAAQ,aAAa;AAG/C,SAASC,aAAa,EAAEC,YAAY,EAAEC,oBAAoB,EAAEC,iBAAiB,EAAEC,aAAa,EAAEC,gBAAgB,EAAEC,iBAAiB,EAAEC,sBAAsB,EAAEC,kBAAkB,QAAQ,WAAW;AAEhM,OAAO,MAAMC,cAAc,GAAGX,aAAa,CACvC;EACIY,cAAc,EAAEC,SAAS;EACzBC,YAAY,EAAE,KAAK;EACnBC,aAAa,EAAE;CAClB,EACDd,EAAE,CAACK,aAAa,EAAE,CAACU,KAAK,EAAEC,MAAM,KAAI;EAChC,uCACOD,KAAK;IACRJ,cAAc,EAAEK,MAAM,CAACC;EAAO;AAEtC,CAAC,CAAC,EACFjB,EAAE,CAACC,aAAa,EAAGc,KAAK,IAAI;EACxB,uCACOA,KAAK;IACRF,YAAY,EAAE;EAAI;AAE1B,CAAC,CAAC,EACFb,EAAE,CAACE,YAAY,EAAGa,KAAK,IAAI;EACvB,uCACOA,KAAK;IACRF,YAAY,EAAE;EAAK;AAE3B,CAAC,CAAC,EACFb,EAAE,CAACM,gBAAgB,EAAGS,KAAK,IAAI;EAC3B,uCACOA,KAAK;IACRD,aAAa,EAAE;EAAI;AAE3B,CAAC,CAAC;AACF;AACAd,EAAE,CAACS,kBAAkB,EAAE,CAACM,KAAK,EAAEC,MAAM,KAAI;EACrC,uCACOD,KAAK;IACRG,YAAY,EAAEF,MAAM,CAACE;EAAY;AAEzC,CAAC,CAAC,EACFlB,EAAE,CAACQ,sBAAsB,EAAE,CAACO,KAAK,EAAEC,MAAM,KAAI;EACzC,uCACOD,KAAK;IACRF,YAAY,EAAE,KAAK;IACnBF,cAAc,EAAEK,MAAM,CAACG;EAAW;AAE1C,CAAC;AACD;AAAA,CACH;;AAED,MAAMC,iBAAiB,GAAG;EACtBF,YAAY,EAAE,EAAE;EAChBG,cAAc,EAAE;CACnB;AACD,OAAO,MAAMC,YAAY,GAAGvB,aAAa,CACrCqB,iBAAiB,EACjBpB,EAAE,CAACO,iBAAiB,EAAGQ,KAAK,IAAI;EAC5B,uCACOA,KAAK;IACRM,cAAc,EAAE,IAAI;IACpBH,YAAY,EAAE;EAAE;AAExB,CAAC,CAAC,EACFlB,EAAE,CAACI,iBAAiB,EAAE,CAACW,KAAK,EAAEC,MAAM,KAAI;EACpC,uCACOD,KAAK;IACRM,cAAc,EAAE,KAAK;IACrBH,YAAY,EAAEF,MAAM,CAACE;EAAY;AAEzC,CAAC,CAAC,EACFlB,EAAE,CAACG,oBAAoB,EAAE,MAAK;EAC1B,OAAOiB,iBAAiB;AAC5B,CAAC,CAAC,CACL","names":["createReducer","on","enterEditMode","exitEditMode","initializeLoginState","loginProcessError","profileLoaded","profileLoadError","startLoginProcess","updateProfileCompleted","updateProfileError","profileReducer","currentProfile","undefined","isInEditMode","errorHappened","state","action","profile","errorMessage","updatedUser","loginInitialState","isLoginPending","loginReducer"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\auth\\+store\\reducers.ts"],"sourcesContent":["import { createReducer, on } from \"@ngrx/store\";\n\nimport { ILoginPageState, IProfilePageState } from \".\";\nimport { enterEditMode, exitEditMode, initializeLoginState, loginProcessError, profileLoaded, profileLoadError, startLoginProcess, updateProfileCompleted, updateProfileError } from \"./actions\";\n\nexport const profileReducer = createReducer<IProfilePageState>(\n    {\n        currentProfile: undefined,\n        isInEditMode: false,\n        errorHappened: false,\n    },\n    on(profileLoaded, (state, action) => {\n        return {\n            ...state,\n            currentProfile: action.profile\n        }\n    }),\n    on(enterEditMode, (state) => {\n        return {\n            ...state,\n            isInEditMode: true,\n        }\n    }),\n    on(exitEditMode, (state) => {\n        return {\n            ...state,\n            isInEditMode: false,\n        }\n    }),\n    on(profileLoadError, (state) => {\n        return {\n            ...state,\n            errorHappened: true\n        }\n    }),\n    // The below 2 action handlings were added offline.\n    on(updateProfileError, (state, action) => {\n        return {\n            ...state,\n            errorMessage: action.errorMessage,\n        }\n    }),\n    on(updateProfileCompleted, (state, action) => {\n        return {\n            ...state,\n            isInEditMode: false,\n            currentProfile: action.updatedUser\n        }\n    })\n    // End offline edit.\n)\n\nconst loginInitialState = {\n    errorMessage: '',\n    isLoginPending: false,\n}\nexport const loginReducer = createReducer<ILoginPageState>(\n    loginInitialState,\n    on(startLoginProcess, (state) => {\n        return {\n            ...state,\n            isLoginPending: true,\n            errorMessage: ''\n        }\n    }),\n    on(loginProcessError, (state, action) => {\n        return {\n            ...state,\n            isLoginPending: false,\n            errorMessage: action.errorMessage\n        }\n    }),\n    on(initializeLoginState, () => {\n        return loginInitialState;\n    })\n)"]},"metadata":{},"sourceType":"module","externalDependencies":[]}