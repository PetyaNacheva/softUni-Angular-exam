{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\n//import { createEffects } from \"@ngrx/effects/src/effects_module\";\nimport { of } from \"rxjs\";\nimport { catchError, filter, map, mergeMap } from \"rxjs/operators\";\nimport { login } from \"src/app/+store\";\nimport { profileLoaded, profileLoadError, profilePageInitalized, updateProfileCompleted } from \"./actions\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/core/user.service\";\nexport class ProfileEffects {\n  constructor(actions$, userService) {\n    this.actions$ = actions$;\n    this.userService = userService;\n    this.onProfilePageLoaded$ = createEffect(() => this.actions$.pipe(filter(a => a.type === profilePageInitalized().type), mergeMap(() => this.userService.getProfile$()), map(currentProfile => profileLoaded({\n      profile: currentProfile\n    })), catchError(() => of(profileLoadError()))));\n    // The 2 effects below were added offline.\n    // onProfileUpdateStarted$ = createEffect(() => this.actions$.pipe(\n    //     ofType(updateProfileStarted),\n    //     mergeMap(action => this.userService.updateProfiles$(action.user).pipe(\n    //         map(result => updateProfileCompleted({ updatedUser: result })),\n    //     catchError(err => of(updateProfileError({ errorMessage: err.error.message }))))),\n    // ))\n    this.onProfileUpdateCompleted$ = createEffect(() => this.actions$.pipe(ofType(updateProfileCompleted), map(result => login({\n      user: result.updatedUser\n    }))));\n  }\n}\nProfileEffects.ɵfac = function ProfileEffects_Factory(t) {\n  return new (t || ProfileEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.UserService));\n};\nProfileEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProfileEffects,\n  factory: ProfileEffects.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC7D;AACA,SAASC,EAAE,QAAQ,MAAM;AACzB,SAASC,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAClE,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,SAASC,aAAa,EAAEC,gBAAgB,EAAEC,qBAAqB,EAAEC,sBAAsB,QAAkD,WAAW;;;;AAGpJ,OAAM,MAAOC,cAAc;EACvBC,YAAoBC,QAAiB,EAAUC,WAAwB;IAAnD,aAAQ,GAARD,QAAQ;IAAmB,gBAAW,GAAXC,WAAW;IAE1D,yBAAoB,GAAGf,YAAY,CAAC,MAChC,IAAI,CAACc,QAAQ,CAACE,IAAI,CACdZ,MAAM,CAACa,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAKR,qBAAqB,EAAE,CAACQ,IAAI,CAAC,EACpDZ,QAAQ,CAAC,MAAM,IAAI,CAACS,WAAW,CAACI,WAAW,EAAE,CAAC,EAC9Cd,GAAG,CAACe,cAAc,IAAIZ,aAAa,CAAC;MAAEa,OAAO,EAAED;IAAc,CAAE,CAAC,CAAC,EACjEjB,UAAU,CAAC,MAAMD,EAAE,CAACO,gBAAgB,EAAE,CAAC,CAAC,CAC3C,CACJ;IAED;IACA;IACA;IACA;IACA;IACA;IAEA;IAEA,8BAAyB,GAAGT,YAAY,CAAC,MAAM,IAAI,CAACc,QAAQ,CAACE,IAAI,CAC7Df,MAAM,CAACU,sBAAsB,CAAC,EAC9BN,GAAG,CAACiB,MAAM,IAAIf,KAAK,CAAC;MAAEgB,IAAI,EAAED,MAAM,CAACE;IAAW,CAAE,CAAC,CAAC,CACrD,CAAC;EAvByE;;;mBADlEZ,cAAc;AAAA;;SAAdA,cAAc;EAAAa,SAAdb,cAAc;AAAA","names":["createEffect","ofType","of","catchError","filter","map","mergeMap","login","profileLoaded","profileLoadError","profilePageInitalized","updateProfileCompleted","ProfileEffects","constructor","actions$","userService","pipe","a","type","getProfile$","currentProfile","profile","result","user","updatedUser","factory"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\auth\\+store\\profile.effects.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\n//import { createEffects } from \"@ngrx/effects/src/effects_module\";\nimport { of } from \"rxjs\";\nimport { catchError, filter, map, mergeMap } from \"rxjs/operators\";\nimport { login } from \"src/app/+store\";\nimport { UserService } from \"src/app/core/user.service\";\nimport { profileLoaded, profileLoadError, profilePageInitalized, updateProfileCompleted, updateProfileError, updateProfileStarted } from \"./actions\";\n\n@Injectable()\nexport class ProfileEffects {\n    constructor(private actions$: Actions, private userService: UserService) { }\n\n    onProfilePageLoaded$ = createEffect(() =>\n        this.actions$.pipe(\n            filter(a => a.type === profilePageInitalized().type),\n            mergeMap(() => this.userService.getProfile$()),\n            map(currentProfile => profileLoaded({ profile: currentProfile })),\n            catchError(() => of(profileLoadError()))\n        )\n    )\n\n    // The 2 effects below were added offline.\n    // onProfileUpdateStarted$ = createEffect(() => this.actions$.pipe(\n    //     ofType(updateProfileStarted),\n    //     mergeMap(action => this.userService.updateProfiles$(action.user).pipe(\n    //         map(result => updateProfileCompleted({ updatedUser: result })),\n    //     catchError(err => of(updateProfileError({ errorMessage: err.error.message }))))),\n        \n    // ))\n\n    onProfileUpdateCompleted$ = createEffect(() => this.actions$.pipe(\n        ofType(updateProfileCompleted),\n        map(result => login({ user: result.updatedUser }))\n    ))\n    // End of offline edit.\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}