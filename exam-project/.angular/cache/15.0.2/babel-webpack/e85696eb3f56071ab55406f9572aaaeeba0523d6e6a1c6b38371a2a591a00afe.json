{"ast":null,"code":"import { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nexport class StorageService {\n  setItem(key, item) {\n    return item;\n  }\n  getItem(key) {\n    return null;\n  }\n}\nexport function storageFactory(platformId) {\n  if (isPlatformBrowser(platformId)) {\n    return new BrowserStorage();\n  }\n  if (isPlatformServer(platformId)) {\n    return new ServerStorage();\n  }\n  throw new Error('No implementation for this platform: ' + platformId);\n}\nexport const storageServiceProvider = {\n  provide: StorageService,\n  useFactory: storageFactory,\n  deps: [PLATFORM_ID]\n};\nexport class BrowserStorage {\n  constructor() {\n    this.localStorage = localStorage;\n  }\n  setItem(key, item) {\n    const str = typeof item === 'string' ? item : JSON.stringify(item);\n    this.localStorage.setItem(key, str);\n    return item;\n  }\n  getItem(key) {\n    let item;\n    const tmp = this.localStorage.getItem(key);\n    if (!tmp) {\n      return null;\n    }\n    try {\n      item = JSON.parse(tmp);\n    } catch (_a) {\n      item = tmp;\n    }\n    return item;\n  }\n}\nconst source = {};\nexport class ServerStorage {\n  constructor() {\n    this.localStorage = {\n      data: source,\n      setItem(key, item) {\n        this.data[key] = item;\n      },\n      getItem(key) {\n        return this.data[key];\n      }\n    };\n  }\n  setItem(key, item) {\n    this.localStorage.setItem(key, JSON.stringify(item));\n    return item;\n  }\n  getItem(key) {\n    let item;\n    const tmp = this.localStorage.getItem(key);\n    if (!tmp) {\n      return null;\n    }\n    try {\n      item = JSON.parse(tmp);\n    } catch (_a) {\n      item = tmp;\n    }\n    return item;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAmBA,WAAW,QAAQ,eAAe;AACrD,SAASC,iBAAiB,EAAEC,gBAAgB,QAAQ,iBAAiB;AAOrE,OAAM,MAAOC,cAAc;EACzBC,OAAO,CAAIC,GAAG,EAAEC,IAAI;IAAO,OAAOA,IAAI;EAAE;EACxCC,OAAO,CAAIF,GAAG;IAAO,OAAO,IAAI;EAAE;;AAGpC,OAAM,SAAUG,cAAc,CAACC,UAAkB;EAC/C,IAAIR,iBAAiB,CAACQ,UAAU,CAAC,EAAE;IACjC,OAAO,IAAIC,cAAc,EAAE;;EAE7B,IAAIR,gBAAgB,CAACO,UAAU,CAAC,EAAE;IAChC,OAAO,IAAIE,aAAa,EAAE;;EAE5B,MAAM,IAAIC,KAAK,CAAC,uCAAuC,GAAGH,UAAU,CAAC;AACvE;AAEA,OAAO,MAAMI,sBAAsB,GAAa;EAC9CC,OAAO,EAAEX,cAAc;EACvBY,UAAU,EAAEP,cAAc;EAC1BQ,IAAI,EAAE,CAAChB,WAAW;CACnB;AAGD,OAAM,MAAOU,cAAc;EAA3BO;IACE,iBAAY,GAAGC,YAAY;EAmB7B;EAjBEd,OAAO,CAAIC,GAAW,EAAEC,IAAO;IAC7B,MAAMa,GAAG,GAAG,OAAOb,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAGc,IAAI,CAACC,SAAS,CAACf,IAAI,CAAC;IAClE,IAAI,CAACY,YAAY,CAACd,OAAO,CAACC,GAAG,EAAEc,GAAG,CAAC;IACnC,OAAOb,IAAI;EACb;EAEAC,OAAO,CAAIF,GAAW;IACpB,IAAIC,IAAI;IACR,MAAMgB,GAAG,GAAG,IAAI,CAACJ,YAAY,CAACX,OAAO,CAACF,GAAG,CAAC;IAC1C,IAAI,CAACiB,GAAG,EAAE;MAAE,OAAO,IAAI;;IACvB,IAAI;MACFhB,IAAI,GAAGc,IAAI,CAACG,KAAK,CAACD,GAAG,CAAC;KACvB,CAAC,WAAM;MACNhB,IAAI,GAAGgB,GAAG;;IAEZ,OAAOhB,IAAI;EACb;;AAGF,MAAMkB,MAAM,GAA2B,EAAE;AACzC,OAAM,MAAOb,aAAa;EAA1BM;IAEE,iBAAY,GAAG;MACbQ,IAAI,EAAED,MAAM;MACZpB,OAAO,CAAIC,GAAW,EAAEC,IAAO;QAC7B,IAAI,CAACmB,IAAI,CAACpB,GAAG,CAAC,GAAGC,IAAI;MACvB,CAAC;MACDC,OAAO,CAAIF,GAAW;QACpB,OAAO,IAAI,CAACoB,IAAI,CAACpB,GAAG,CAAC;MACvB;KACD;EAkBH;EAhBED,OAAO,CAAIC,GAAW,EAAEC,IAAO;IAC7B,IAAI,CAACY,YAAY,CAACd,OAAO,CAACC,GAAG,EAAEe,IAAI,CAACC,SAAS,CAACf,IAAI,CAAC,CAAC;IACpD,OAAOA,IAAI;EACb;EAEAC,OAAO,CAAIF,GAAW;IACpB,IAAIC,IAAI;IACR,MAAMgB,GAAG,GAAG,IAAI,CAACJ,YAAY,CAACX,OAAO,CAACF,GAAG,CAAQ;IACjD,IAAI,CAACiB,GAAG,EAAE;MAAE,OAAO,IAAI;;IACvB,IAAI;MACFhB,IAAI,GAAGc,IAAI,CAACG,KAAK,CAACD,GAAG,CAAC;KACvB,CAAC,WAAM;MACNhB,IAAI,GAAGgB,GAAG;;IAEZ,OAAOhB,IAAI;EACb","names":["PLATFORM_ID","isPlatformBrowser","isPlatformServer","StorageService","setItem","key","item","getItem","storageFactory","platformId","BrowserStorage","ServerStorage","Error","storageServiceProvider","provide","useFactory","deps","constructor","localStorage","str","JSON","stringify","tmp","parse","source","data"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\core\\storage.service.ts"],"sourcesContent":["import { Provider, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\n\ninterface IStorage {\n  setItem<T>(key: string, item: T): T;\n  getItem<T>(key: string): T;\n}\n\nexport class StorageService implements IStorage {\n  setItem<T>(key, item): T { return item; }\n  getItem<T>(key): T { return null; }\n}\n\nexport function storageFactory(platformId: string): any {\n  if (isPlatformBrowser(platformId)) {\n    return new BrowserStorage();\n  }\n  if (isPlatformServer(platformId)) {\n    return new ServerStorage();\n  }\n  throw new Error('No implementation for this platform: ' + platformId);\n}\n\nexport const storageServiceProvider: Provider = {\n  provide: StorageService,\n  useFactory: storageFactory,\n  deps: [PLATFORM_ID]\n};\n\n\nexport class BrowserStorage {\n  localStorage = localStorage;\n\n  setItem<T>(key: string, item: T): T {\n    const str = typeof item === 'string' ? item : JSON.stringify(item);\n    this.localStorage.setItem(key, str);\n    return item;\n  }\n\n  getItem<T>(key: string): T {\n    let item;\n    const tmp = this.localStorage.getItem(key);\n    if (!tmp) { return null; }\n    try {\n      item = JSON.parse(tmp);\n    } catch {\n      item = tmp;\n    }\n    return item;\n  }\n}\n\nconst source: { [key: string]: any } = {};\nexport class ServerStorage {\n\n  localStorage = {\n    data: source,\n    setItem<T>(key: string, item: T): void {\n      this.data[key] = item;\n    },\n    getItem<T>(key: string): T {\n      return this.data[key];\n    }\n  };\n\n  setItem<T>(key: string, item: T): T {\n    this.localStorage.setItem(key, JSON.stringify(item));\n    return item;\n  }\n\n  getItem<T>(key: string): T {\n    let item;\n    const tmp = this.localStorage.getItem(key) as any;\n    if (!tmp) { return null; }\n    try {\n      item = JSON.parse(tmp);\n    } catch {\n      item = tmp;\n    }\n    return item;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}