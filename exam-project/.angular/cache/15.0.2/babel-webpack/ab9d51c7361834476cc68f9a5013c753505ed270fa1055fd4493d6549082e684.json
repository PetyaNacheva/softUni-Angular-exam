{"ast":null,"code":"import { BehaviorSubject, EMPTY } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this._currentUser = new BehaviorSubject(undefined);\n    this.currentUser$ = this._currentUser.asObservable();\n    this.isLoggedIn$ = this.currentUser$.pipe(map(user => !!user));\n  }\n  login$(userData) {\n    return this.httpClient.post(`${environment.apiUrl}/login`, userData, {\n      withCredentials: true,\n      observe: 'response'\n    }).pipe(map(response => response.body));\n  }\n  logout$() {\n    return this.httpClient.post(`${environment.apiUrl}/logout`, {}, {\n      withCredentials: true\n    });\n  }\n  register$(userData) {\n    return this.httpClient.post(`${environment.apiUrl}/register`, userData, {\n      withCredentials: true\n    });\n  }\n  authenticate() {\n    return this.httpClient.get(`${environment.apiUrl}/users/profile`, {\n      withCredentials: true\n    }).pipe(tap(currentProfile => this.handleLogin(currentProfile)), catchError(err => {\n      return EMPTY;\n    }));\n  }\n  handleLogin(newUser) {\n    this._currentUser.next(newUser);\n  }\n  handleLogout() {\n    this._currentUser.next(undefined);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAEC,KAAK,QAAoB,MAAM;AACzD,SAASC,UAAU,EAAEC,GAAG,EAAEC,GAAG,QAAQ,gBAAgB;AACrD,SAASC,WAAW,QAAQ,8BAA8B;;;AAO1D,OAAM,MAAOC,WAAW;EAMtBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IALtB,iBAAY,GAAG,IAAIR,eAAe,CAAQS,SAAS,CAAC;IAE5D,iBAAY,GAAG,IAAI,CAACC,YAAY,CAACC,YAAY,EAAE;IAC/C,gBAAW,GAAG,IAAI,CAACC,YAAY,CAACC,IAAI,CAACV,GAAG,CAACW,IAAI,IAAI,CAAC,CAACA,IAAI,CAAC,CAAC;EAGzD;EAEAC,MAAM,CAACC,QAA6C;IAClD,OAAO,IAAI,CAACR,UAAU,CACnBS,IAAI,CAAQ,GAAGZ,WAAW,CAACa,MAAM,QAAQ,EAAEF,QAAQ,EAAE;MAAEG,eAAe,EAAE,IAAI;MAAEC,OAAO,EAAE;IAAU,CAAE,CAAC,CACpGP,IAAI,CACHV,GAAG,CAACkB,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACL;EAEAC,OAAO;IACL,OAAO,IAAI,CAACf,UAAU,CACnBS,IAAI,CAAO,GAAGZ,WAAW,CAACa,MAAM,SAAS,EAAE,EAAE,EAAE;MAAEC,eAAe,EAAE;IAAI,CAAE,CAAC;EAC9E;EAEAK,SAAS,CAACR,QAAuB;IAC/B,OAAO,IAAI,CAACR,UAAU,CAACS,IAAI,CAAQ,GAAGZ,WAAW,CAACa,MAAM,WAAW,EAAEF,QAAQ,EAAE;MAAEG,eAAe,EAAE;IAAI,CAAE,CAAC;EAC3G;EAEAM,YAAY;IACV,OAAO,IAAI,CAACjB,UAAU,CACnBkB,GAAG,CAAQ,GAAGrB,WAAW,CAACa,MAAM,gBAAgB,EAAE;MAAEC,eAAe,EAAE;IAAI,CAAE,CAAC,CAC5EN,IAAI,CAACT,GAAG,CAACuB,cAAc,IAAI,IAAI,CAACC,WAAW,CAACD,cAAc,CAAC,CAAC,EAAEzB,UAAU,CAAE2B,GAAG,IAAI;MAChF,OAAO5B,KAAK;IACd,CAAC,CAAC,CAAC;EACP;EAEA2B,WAAW,CAACE,OAAc;IACxB,IAAI,CAACpB,YAAY,CAACqB,IAAI,CAACD,OAAO,CAAC;EACjC;EAEAE,YAAY;IACV,IAAI,CAACtB,YAAY,CAACqB,IAAI,CAACtB,SAAS,CAAC;EACnC;;;mBAxCWH,WAAW;AAAA;;SAAXA,WAAW;EAAA2B,SAAX3B,WAAW;EAAA4B,YAFV;AAAM","names":["BehaviorSubject","EMPTY","catchError","map","tap","environment","AuthService","constructor","httpClient","undefined","_currentUser","asObservable","currentUser$","pipe","user","login$","userData","post","apiUrl","withCredentials","observe","response","body","logout$","register$","authenticate","get","currentProfile","handleLogin","err","newUser","next","handleLogout","factory","providedIn"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, EMPTY, Observable } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { IUser } from './core/interfaces';\nimport { CreateUserDto } from './core/user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private _currentUser = new BehaviorSubject<IUser>(undefined);\n\n  currentUser$ = this._currentUser.asObservable();\n  isLoggedIn$ = this.currentUser$.pipe(map(user => !!user));\n\n  constructor(private httpClient: HttpClient) {\n  }\n\n  login$(userData: { email: string, password: string }): Observable<IUser> {\n    return this.httpClient\n      .post<IUser>(`${environment.apiUrl}/login`, userData, { withCredentials: true, observe: 'response' })\n      .pipe(\n        map(response => response.body),\n      )\n  }\n\n  logout$(): Observable<void> {\n    return this.httpClient\n      .post<void>(`${environment.apiUrl}/logout`, {}, { withCredentials: true })\n  }\n\n  register$(userData: CreateUserDto): Observable<IUser> {\n    return this.httpClient.post<IUser>(`${environment.apiUrl}/register`, userData, { withCredentials: true })\n  }\n\n  authenticate(): Observable<IUser> {\n    return this.httpClient\n      .get<IUser>(`${environment.apiUrl}/users/profile`, { withCredentials: true })\n      .pipe(tap(currentProfile => this.handleLogin(currentProfile)), catchError((err) => {\n        return EMPTY;\n      }))\n  }\n\n  handleLogin(newUser: IUser) {\n    this._currentUser.next(newUser);\n  }\n\n  handleLogout() {\n    this._currentUser.next(undefined);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}