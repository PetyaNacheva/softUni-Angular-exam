{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { map } from 'rxjs';\nimport { MessageType } from 'src/app/core/message-bus.service';\nlet MoviesNewCommentComponent = class MoviesNewCommentComponent {\n  constructor(router, commentService, movieService, authService, messageBus) {\n    this.router = router;\n    this.commentService = commentService;\n    this.movieService = movieService;\n    this.authService = authService;\n    this.messageBus = messageBus;\n    // comments:Observable<Comment[]>;\n    this.comments = [];\n    this.currentUser$ = this.authService.currentUser$;\n    this.isLoggedIn$ = this.currentUser$.pipe(map(user => !!user));\n  }\n  ngOnInit() {\n    this.movieService.loadMovieById(this.movieId).subscribe(movie => {\n      this.comments = movie.comments;\n      // console.log(movie.comments)\n      // get user and check if user._id includes in each comment likes array\n      this.comments.forEach(c => {\n        this.currentUser$.subscribe(user => this.currUser = user);\n        this.canLikeComment = c.likes.includes(this.currUser._id);\n        c.canLike = c.likes.includes(this.currUser._id);\n        c.isOwner = c.userId._id == this.currUser._id;\n      });\n      // console.log(this.comments);\n    });\n  }\n\n  submitComment(text) {\n    // console.log(text);\n    // console.log(this.movieId)\n    // this.movieService.commentMovie(text, this.movieId).subscribe({\n    //   next: (comment) => {\n    //     this.router.navigateByUrl(`/RefreshComponent`, { skipLocationChange: true }).then(() => {\n    //       this.router.navigate(['/movies', this.movieId]);\n    //     });\n    //     this.messageBus.notifyForMessage({\n    //       text: 'User successfully add new comment!',\n    //       type: MessageType.Success\n    //     })\n    //   },\n    //   error: (error) => {\n    //     console.error(error);\n    //   }\n    // })\n    // let comments:Comment = new Comment;\n    this.commentService.addComment$(text, this.movieId).subscribe({\n      next: comment => {\n        debugger;\n        // console.log('returned comment: ', comment);\n        this.router.navigateByUrl(`/RefreshComponent`, {\n          skipLocationChange: true\n        }).then(() => {\n          this.router.navigate(['/movies', this.movieId]);\n        });\n        this.messageBus.notifyForMessage({\n          text: 'User successfully add new comment!',\n          type: MessageType.Success\n        });\n      },\n      error: error => {\n        console.error(error);\n      }\n    });\n  }\n  likeComment(comment) {\n    console.log('like comment', comment);\n    this.commentService.likeComment(comment.movieId, comment._id).subscribe(res => {\n      // console.log(res.message)\n      this.messageBus.notifyForMessage({\n        text: res.message,\n        type: MessageType.Success\n      });\n    });\n    this.router.navigateByUrl(`/RefreshComponent`, {\n      skipLocationChange: true\n    }).then(() => {\n      this.router.navigate(['/movies', this.movieId]);\n    });\n  }\n  dislikeComment(comment) {\n    console.log('dislike comment');\n    this.commentService.dislikeComment(comment.movieId, comment._id).subscribe(res => {\n      this.messageBus.notifyForMessage({\n        text: res.message,\n        type: MessageType.Success\n      });\n    });\n    this.router.navigateByUrl(`/RefreshComponent`, {\n      skipLocationChange: true\n    }).then(() => {\n      this.router.navigate(['/movies', this.movieId]);\n    });\n  }\n};\n__decorate([Input()], MoviesNewCommentComponent.prototype, \"movieId\", void 0);\n__decorate([Input()], MoviesNewCommentComponent.prototype, \"movie\", void 0);\nMoviesNewCommentComponent = __decorate([Component({\n  selector: 'app-movies-new-comment',\n  templateUrl: './movies-new-comment.component.html',\n  styleUrls: ['./movies-new-comment.component.css']\n})], MoviesNewCommentComponent);\nexport { MoviesNewCommentComponent };","map":{"version":3,"mappings":"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","names":["Component","Input","map","MessageType","MoviesNewCommentComponent","constructor","router","commentService","movieService","authService","messageBus","currentUser$","pipe","user","ngOnInit","loadMovieById","movieId","subscribe","movie","comments","forEach","c","currUser","canLikeComment","likes","includes","_id","canLike","isOwner","userId","submitComment","text","addComment$","next","comment","navigateByUrl","skipLocationChange","then","navigate","notifyForMessage","type","Success","error","console","likeComment","log","res","message","dislikeComment","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\feature\\movies\\movies-new-comment\\movies-new-comment.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, map, tap } from 'rxjs';\r\nimport { AuthService } from 'src/app/auth.service';\r\nimport { CommentService } from 'src/app/core/comment.service';\r\n// import { Comments } from '../models/';\r\nimport { IComment, IMovie, IUser } from 'src/app/core/interfaces';\r\nimport { MessageBusService, MessageType } from 'src/app/core/message-bus.service';\r\nimport { MovieService } from 'src/app/core/movie.service';\r\n\r\n@Component({\r\n  selector: 'app-movies-new-comment',\r\n  templateUrl: './movies-new-comment.component.html',\r\n  styleUrls: ['./movies-new-comment.component.css']\r\n})\r\nexport class MoviesNewCommentComponent implements OnInit {\r\n\r\n  @Input() movieId: string;\r\n  @Input() movie: IMovie;\r\n\r\n  // comments:Observable<Comment[]>;\r\n  comments: any[] = [];\r\n  canLikeComment: boolean;\r\n\r\n  currentUser$: Observable<IUser> = this.authService.currentUser$;\r\n  isLoggedIn$ = this.currentUser$.pipe(map(user => !!user));\r\n\r\n  currUser?: IUser;\r\n\r\n  constructor(private router: Router,\r\n    private commentService: CommentService,\r\n    private movieService: MovieService,\r\n    private authService: AuthService,\r\n    private messageBus: MessageBusService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.movieService.loadMovieById(this.movieId).subscribe(movie => {\r\n      this.comments = movie.comments;\r\n      // console.log(movie.comments)\r\n\r\n      // get user and check if user._id includes in each comment likes array\r\n      this.comments.forEach(c => {\r\n        this.currentUser$.subscribe(user => this.currUser = user);\r\n        this.canLikeComment = c.likes.includes(this.currUser._id)\r\n        c.canLike = c.likes.includes(this.currUser._id)\r\n        c.isOwner = c.userId._id == this.currUser._id\r\n      })\r\n\r\n      // console.log(this.comments);\r\n    })\r\n  }\r\n\r\n  submitComment(text: string): void {\r\n    // console.log(text);\r\n    // console.log(this.movieId)\r\n    // this.movieService.commentMovie(text, this.movieId).subscribe({\r\n      \r\n    //   next: (comment) => {\r\n    //     this.router.navigateByUrl(`/RefreshComponent`, { skipLocationChange: true }).then(() => {\r\n    //       this.router.navigate(['/movies', this.movieId]);\r\n    //     });\r\n    //     this.messageBus.notifyForMessage({\r\n    //       text: 'User successfully add new comment!',\r\n    //       type: MessageType.Success\r\n    //     })\r\n    //   },\r\n    //   error: (error) => {\r\n    //     console.error(error);\r\n      \r\n    //   }\r\n    // })\r\n\r\n    // let comments:Comment = new Comment;\r\n    this.commentService.addComment$(text, this.movieId).subscribe({\r\n     \r\n      next: (comment) => {\r\n        debugger;\r\n        // console.log('returned comment: ', comment);\r\n\r\n        this.router.navigateByUrl(`/RefreshComponent`, { skipLocationChange: true }).then(() => {\r\n          this.router.navigate(['/movies', this.movieId]);\r\n        });\r\n        this.messageBus.notifyForMessage({\r\n          text: 'User successfully add new comment!',\r\n          type: MessageType.Success\r\n        })\r\n      },\r\n      error: (error) => {\r\n        console.error(error);\r\n      }\r\n    })\r\n  }\r\n\r\n  likeComment(comment: IComment | any) {\r\n    console.log('like comment', comment)\r\n    this.commentService.likeComment(comment.movieId, comment._id).subscribe(res => {\r\n      // console.log(res.message)\r\n      this.messageBus.notifyForMessage({\r\n        text: res.message,\r\n        type: MessageType.Success\r\n      })\r\n    })\r\n\r\n    this.router.navigateByUrl(`/RefreshComponent`, { skipLocationChange: true }).then(() => {\r\n      this.router.navigate(['/movies', this.movieId]);\r\n    });\r\n  }\r\n\r\n  dislikeComment(comment) {\r\n    console.log('dislike comment');\r\n    this.commentService.dislikeComment(comment.movieId, comment._id).subscribe(res => {\r\n      this.messageBus.notifyForMessage({\r\n        text: res.message,\r\n        type: MessageType.Success\r\n      })\r\n    })\r\n\r\n    this.router.navigateByUrl(`/RefreshComponent`, { skipLocationChange: true }).then(() => {\r\n      this.router.navigate(['/movies', this.movieId]);\r\n    });\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}