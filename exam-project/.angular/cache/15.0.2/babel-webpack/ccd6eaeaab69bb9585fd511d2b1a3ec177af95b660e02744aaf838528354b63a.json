{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst apiUrl = environment.apiUrl;\nexport class MovieService {\n  constructor(http) {\n    this.http = http;\n  }\n  loadMovieList(searchTerm = \"\") {\n    return this.http.get(`${apiUrl}/movies?title=${searchTerm}`, {\n      params: new HttpParams({\n        fromObject: {}\n      })\n    });\n  }\n  loadMovieById(id) {\n    return this.http.get(`${apiUrl}/movies/${id}`);\n  }\n  loadMostLiked$() {\n    return this.http.get(`${apiUrl}/movies/likes`);\n  }\n  loadMostComment$() {\n    return this.http.get(`${apiUrl}/movies/comments`);\n  }\n  addMovie$(body) {\n    return this.http.post(`${apiUrl}/movies`, body, {\n      withCredentials: true\n    });\n  }\n  getAllMoviesByUser$(userId) {\n    return this.http.get(`${apiUrl}/users/profile/${userId}`, {\n      withCredentials: true\n    });\n  }\n  getAllLikedByUser$(userId) {\n    return this.http.get(`${apiUrl}/users/profile/${userId}/liked`, {\n      withCredentials: true\n    });\n  }\n  updateMovie$(id, body) {\n    return this.http.put(`${apiUrl}/movies/${id}/edit`, body, {\n      withCredentials: true\n    });\n  }\n  deleteMovie(id) {\n    return this.http.delete(`${apiUrl}/movies/${id}`, {\n      withCredentials: true\n    });\n  }\n  likeMovie(movieId) {\n    return this.http.put(`${apiUrl}/movies/${movieId}/like`, {}, {\n      withCredentials: true\n    });\n  }\n  dislikeMovie(movieId) {\n    return this.http.put(`${apiUrl}/movies/${movieId}/dislike`, {}, {\n      withCredentials: true\n    });\n  }\n}\nMovieService.ɵfac = function MovieService_Factory(t) {\n  return new (t || MovieService)(i0.ɵɵinject(i1.HttpClient));\n};\nMovieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MovieService,\n  factory: MovieService.ɵfac\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,UAAU,QAAQ,sBAAsB;AAG7D,SAASC,WAAW,QAAQ,8BAA8B;;;AAG1D,MAAMC,MAAM,GAAGD,WAAW,CAACC,MAAM;AAQjC,OAAM,MAAOC,YAAY;EAEvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EAExCC,aAAa,CAACC,aAAqB,EAAE;IACnC,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAClB,GAAGN,MAAM,iBAAiBK,UAAU,EAAE,EAAE;MAAEE,MAAM,EAAE,IAAIT,UAAU,CAAC;QAAEU,UAAU,EAAE;MAAE,CAAE;IAAC,CAAE,CAAC;EAC3F;EAEAC,aAAa,CAACC,EAAU;IACtB,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAS,GAAGN,MAAM,WAAWU,EAAE,EAAE,CAAC;EACxD;EAEAC,cAAc;IACZ,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAW,GAAGN,MAAM,eAAe,CAAC;EAC1D;EAEAY,gBAAgB;IACd,OAAO,IAAI,CAACT,IAAI,CAACG,GAAG,CAAW,GAAGN,MAAM,kBAAkB,CAAC;EAC7D;EAEAa,SAAS,CAACC,IAAoB;IAC5B,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAS,GAAGf,MAAM,SAAS,EAAEc,IAAI,EAAE;MAAEE,eAAe,EAAE;IAAI,CAAE,CAAC;EACpF;EAEAC,mBAAmB,CAACC,MAAc;IAChC,OAAO,IAAI,CAACf,IAAI,CAACG,GAAG,CAAW,GAAGN,MAAM,kBAAkBkB,MAAM,EAAE,EAAE;MAAEF,eAAe,EAAE;IAAI,CAAE,CAAC;EAChG;EAEAG,kBAAkB,CAACD,MAAc;IAC/B,OAAO,IAAI,CAACf,IAAI,CAACG,GAAG,CAAW,GAAGN,MAAM,kBAAkBkB,MAAM,QAAQ,EAAE;MAAEF,eAAe,EAAE;IAAI,CAAE,CAAC;EACtG;EAEAI,YAAY,CAACV,EAAU,EAAEI,IAAoB;IAC3C,OAAO,IAAI,CAACX,IAAI,CAACkB,GAAG,CAAS,GAAGrB,MAAM,WAAWU,EAAE,OAAO,EAAEI,IAAI,EAAE;MAAEE,eAAe,EAAE;IAAI,CAAE,CAAC;EAC9F;EAEAM,WAAW,CAACZ,EAAU;IACpB,OAAO,IAAI,CAACP,IAAI,CAACoB,MAAM,CAAC,GAAGvB,MAAM,WAAWU,EAAE,EAAE,EAAE;MAAEM,eAAe,EAAE;IAAI,CAAE,CAAC;EAC9E;EAEAQ,SAAS,CAACC,OAAe;IACvB,OAAO,IAAI,CAACtB,IAAI,CAACkB,GAAG,CAAS,GAAGrB,MAAM,WAAWyB,OAAO,OAAO,EAAE,EAAE,EAAE;MAAET,eAAe,EAAE;IAAI,CAAE,CAAC;EACjG;EAEAU,YAAY,CAACD,OAAe;IAC1B,OAAO,IAAI,CAACtB,IAAI,CAACkB,GAAG,CAAS,GAAGrB,MAAM,WAAWyB,OAAO,UAAU,EAAE,EAAE,EAAE;MAAET,eAAe,EAAE;IAAI,CAAE,CAAC;EACpG;;;mBA/CWf,YAAY;AAAA;;SAAZA,YAAY;EAAA0B,SAAZ1B,YAAY;AAAA","names":["HttpParams","environment","apiUrl","MovieService","constructor","http","loadMovieList","searchTerm","get","params","fromObject","loadMovieById","id","loadMostLiked$","loadMostComment$","addMovie$","body","post","withCredentials","getAllMoviesByUser$","userId","getAllLikedByUser$","updateMovie$","put","deleteMovie","delete","likeMovie","movieId","dislikeMovie","factory"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\core\\movie.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { IMovie } from './interfaces';\r\n\r\nconst apiUrl = environment.apiUrl;\r\n\r\nexport interface CreateMovieDto {\r\n  \r\n  title: string, director: string, genre: string, releaseDate: string, poster: string, actors: string[], shortStory: string\r\n}\r\n\r\n@Injectable()\r\nexport class MovieService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  loadMovieList(searchTerm: string = \"\"): Observable<IMovie[]> {\r\n    return this.http.get<IMovie[]>(\r\n      `${apiUrl}/movies?title=${searchTerm}`, { params: new HttpParams({ fromObject: {} }) });\r\n  }\r\n\r\n  loadMovieById(id: string): Observable<IMovie> {\r\n    return this.http.get<IMovie>(`${apiUrl}/movies/${id}`);\r\n  }\r\n\r\n  loadMostLiked$(): Observable<IMovie[]> {\r\n    return this.http.get<IMovie[]>(`${apiUrl}/movies/likes`);\r\n  }\r\n\r\n  loadMostComment$(): Observable<IMovie[]> {\r\n    return this.http.get<IMovie[]>(`${apiUrl}/movies/comments`);\r\n  }\r\n\r\n  addMovie$(body: CreateMovieDto): Observable<IMovie> {\r\n    return this.http.post<IMovie>(`${apiUrl}/movies`, body, { withCredentials: true });\r\n  }\r\n\r\n  getAllMoviesByUser$(userId: string): Observable<IMovie[]> {\r\n    return this.http.get<IMovie[]>(`${apiUrl}/users/profile/${userId}`, { withCredentials: true });\r\n  }\r\n\r\n  getAllLikedByUser$(userId: string): Observable<IMovie[]> {\r\n    return this.http.get<IMovie[]>(`${apiUrl}/users/profile/${userId}/liked`, { withCredentials: true });\r\n  }\r\n\r\n  updateMovie$(id: string, body: CreateMovieDto): Observable<IMovie> {\r\n    return this.http.put<IMovie>(`${apiUrl}/movies/${id}/edit`, body, { withCredentials: true });\r\n  }\r\n\r\n  deleteMovie(id: string) {\r\n    return this.http.delete(`${apiUrl}/movies/${id}`, { withCredentials: true });\r\n  }\r\n\r\n  likeMovie(movieId: string): Observable<IMovie> {\r\n    return this.http.put<IMovie>(`${apiUrl}/movies/${movieId}/like`, {}, { withCredentials: true });\r\n  }\r\n\r\n  dislikeMovie(movieId: string): Observable<IMovie> {\r\n    return this.http.put<IMovie>(`${apiUrl}/movies/${movieId}/dislike`, {}, { withCredentials: true });\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}