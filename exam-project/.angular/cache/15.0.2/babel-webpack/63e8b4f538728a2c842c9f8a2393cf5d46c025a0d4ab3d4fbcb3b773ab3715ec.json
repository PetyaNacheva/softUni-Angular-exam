{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { MessageType } from 'src/app/core/message-bus.service';\nlet MoviesDetailPageComponent = class MoviesDetailPageComponent {\n  constructor(activatedRoute, movieService, authService, router, messageBus) {\n    this.activatedRoute = activatedRoute;\n    this.movieService = movieService;\n    this.authService = authService;\n    this.router = router;\n    this.messageBus = messageBus;\n    this.refreshMovieRequest$ = new BehaviorSubject(undefined);\n    this.isLoggedIn$ = this.authService.isLoggedIn$;\n    this.canLike = false;\n    this.isUserAuthor = false;\n    this.makeUpdate = false;\n  }\n  ngOnInit() {\n    combineLatest([this.activatedRoute.params.pipe(mergeMap(params => {\n      const movieId = params['movieId'];\n      return this.refreshMovieRequest$.pipe(mergeMap(() => this.movieService.loadMovieById(movieId)));\n    })), this.authService.currentUser$]).subscribe(([movie, user]) => {\n      this.currentUser = user;\n      this.movie = movie;\n      this.canLike = user && !this.movie.likes.includes(user === null || user === void 0 ? void 0 : user._id);\n      this.isUserAuthor = user && this.movie.userId._id == user._id;\n    });\n  }\n  updateMovie() {\n    this.makeUpdate = true;\n  }\n  deleteMovieHandler() {\n    // console.log('try to delete')\n    if (window.confirm(`Are you sure you want to delete - ${this.movie.title} ?`)) {\n      this.messageBus.notifyForMessage({\n        text: `You delete movie - ${this.movie.title} !`,\n        type: MessageType.Success\n      });\n      this.movieService.deleteMovie(this.movie._id).subscribe(res => {\n        this.router.navigate(['/movies']);\n      });\n    }\n  }\n  likeMovie() {\n    // console.log('like movie');\n    this.movieService.likeMovie(this.movie._id).subscribe(() => this.refreshMovieRequest$.next(undefined));\n    this.messageBus.notifyForMessage({\n      text: 'You liked this movie!',\n      type: MessageType.Success\n    });\n  }\n  dislikeMovie() {\n    // console.log('dislike movie');\n    this.movieService.dislikeMovie(this.movie._id).subscribe(() => this.refreshMovieRequest$.next(undefined));\n    this.messageBus.notifyForMessage({\n      text: 'You disliked this movie!',\n      type: MessageType.Success\n    });\n  }\n};\nMoviesDetailPageComponent = __decorate([Component({\n  selector: 'app-movies-detail-page',\n  templateUrl: './movies-detail-page.component.html',\n  styleUrls: ['./movies-detail-page.component.css']\n})], MoviesDetailPageComponent);\nexport { MoviesDetailPageComponent };","map":{"version":3,"mappings":"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","names":["Component","BehaviorSubject","combineLatest","mergeMap","MessageType","MoviesDetailPageComponent","constructor","activatedRoute","movieService","authService","router","messageBus","undefined","isLoggedIn$","ngOnInit","params","pipe","movieId","refreshMovieRequest$","loadMovieById","currentUser$","subscribe","movie","user","currentUser","canLike","likes","includes","_id","isUserAuthor","userId","updateMovie","makeUpdate","deleteMovieHandler","window","confirm","title","notifyForMessage","text","type","Success","deleteMovie","res","navigate","likeMovie","next","dislikeMovie","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\feature\\movies\\movies-detail-page\\movies-detail-page.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport {  map, mergeMap } from 'rxjs/operators';\r\nimport { AuthService } from 'src/app/auth.service';\r\nimport { IMovie, IUser } from 'src/app/core/interfaces';\r\nimport { MessageBusService, MessageType } from 'src/app/core/message-bus.service';\r\nimport { MovieService } from 'src/app/core/movie.service';\r\n\r\n@Component({\r\n  selector: 'app-movies-detail-page',\r\n  templateUrl: './movies-detail-page.component.html',\r\n  styleUrls: ['./movies-detail-page.component.css']\r\n})\r\nexport class MoviesDetailPageComponent implements OnInit {\r\n\r\n  refreshMovieRequest$ = new BehaviorSubject(undefined);\r\n  movie: IMovie;\r\n  currentUser?: IUser;\r\n\r\n  isLoggedIn$: Observable<boolean> = this.authService.isLoggedIn$;\r\n  canLike: boolean = false;\r\n  isUserAuthor: boolean = false;\r\n\r\n  makeUpdate: boolean = false;\r\n\r\n  constructor(private activatedRoute: ActivatedRoute,\r\n    private movieService: MovieService,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private messageBus: MessageBusService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    combineLatest([\r\n      this.activatedRoute.params\r\n        .pipe(\r\n          mergeMap(params => {\r\n            const movieId = params['movieId'];\r\n            return this.refreshMovieRequest$.pipe(mergeMap(() => this.movieService.loadMovieById(movieId)));\r\n          })\r\n        ),\r\n      this.authService.currentUser$\r\n    ])\r\n      .subscribe(([movie, user]) => {\r\n        this.currentUser = user;\r\n        this.movie = movie;\r\n        this.canLike = user && !this.movie.likes.includes(user?._id);\r\n        this.isUserAuthor = user && this.movie.userId._id == user._id;\r\n      })\r\n\r\n  }\r\n\r\n  updateMovie() {\r\n    this.makeUpdate = true;\r\n  }\r\n\r\n\r\n  deleteMovieHandler() {\r\n    // console.log('try to delete')\r\n    if (window.confirm(`Are you sure you want to delete - ${this.movie.title} ?`)) {\r\n\r\n      this.messageBus.notifyForMessage({\r\n        text: `You delete movie - ${this.movie.title} !`,\r\n        type: MessageType.Success\r\n      })\r\n\r\n      this.movieService.deleteMovie(this.movie._id)\r\n        .subscribe((res: any) => {\r\n          this.router.navigate(['/movies']);\r\n        })\r\n    }\r\n  }\r\n\r\n  likeMovie() {\r\n    // console.log('like movie');\r\n\r\n    this.movieService.likeMovie(this.movie._id)\r\n      .subscribe(() => this.refreshMovieRequest$.next(undefined));\r\n\r\n    this.messageBus.notifyForMessage({\r\n      text: 'You liked this movie!',\r\n      type: MessageType.Success\r\n    })\r\n  }\r\n\r\n  dislikeMovie() {\r\n    // console.log('dislike movie');\r\n\r\n    this.movieService.dislikeMovie(this.movie._id)\r\n      .subscribe(() => this.refreshMovieRequest$.next(undefined));\r\n\r\n    this.messageBus.notifyForMessage({\r\n      text: 'You disliked this movie!',\r\n      type: MessageType.Success\r\n    })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}