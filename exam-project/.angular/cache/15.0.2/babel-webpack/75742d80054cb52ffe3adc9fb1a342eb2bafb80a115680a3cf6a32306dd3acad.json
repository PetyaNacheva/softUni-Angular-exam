{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./storage.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class UserService {\n  constructor(storage, httpClient) {\n    this.storage = storage;\n    this.httpClient = httpClient;\n  }\n  getProfile$() {\n    return this.httpClient.get(`${environment.apiUrl}/users/profile`, {\n      withCredentials: true\n    });\n  }\n  updateProfile$(newUser) {\n    return this.httpClient.put(`${environment.apiUrl}/users/profile`, newUser, {\n      withCredentials: true\n    });\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.StorageService), i0.ɵɵinject(i2.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac\n});","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,8BAA8B;;;;AAa1D,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,OAAuB,EAAUC,UAAsB;IAAvD,YAAO,GAAPD,OAAO;IAA0B,eAAU,GAAVC,UAAU;EAE/D;EAEAC,WAAW;IACT,OAAO,IAAI,CAACD,UAAU,CAACE,GAAG,CAAQ,GAAGN,WAAW,CAACO,MAAM,gBAAgB,EAAE;MAAEC,eAAe,EAAE;IAAI,CAAE,CAAC;EACrG;EAEAC,cAAc,CAACC,OAAuB;IACpC,OAAO,IAAI,CAACN,UAAU,CAACO,GAAG,CAAQ,GAAGX,WAAW,CAACO,MAAM,gBAAgB,EAAEG,OAAO,EAAE;MAAEF,eAAe,EAAE;IAAI,CAAE,CAAC;EAC9G;;;mBAZWP,WAAW;AAAA;;SAAXA,WAAW;EAAAW,SAAXX,WAAW;AAAA","names":["environment","UserService","constructor","storage","httpClient","getProfile$","get","apiUrl","withCredentials","updateProfile$","newUser","put","factory"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\core\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { IUser } from './interfaces';\nimport { StorageService } from './storage.service';\n\nexport interface IUpdateUserDto {\n  username: string, email: string\n}\n\nexport interface CreateUserDto {\n  username: string, email: string, password: string\n}\n\n@Injectable()\nexport class UserService {\n\n  constructor(private storage: StorageService, private httpClient: HttpClient) {\n\n  }\n\n  getProfile$(): Observable<IUser> {\n    return this.httpClient.get<IUser>(`${environment.apiUrl}/users/profile`, { withCredentials: true });\n  }\n\n  updateProfile$(newUser: IUpdateUserDto): Observable<IUser> {\n    return this.httpClient.put<IUser>(`${environment.apiUrl}/users/profile`, newUser, { withCredentials: true })\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}