{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nexport class AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(tap(event => {\n      if (event instanceof HttpResponse) {\n        // localhost:3000/api/login || localhost:3000/register\n        if (event.url.endsWith('login') || event.url.endsWith('register')) {\n          //console.log('login/register happened');\n          const newlyLoggedUser = event.body;\n          this.authService.handleLogin(newlyLoggedUser);\n        } else if (event.url.endsWith('logout')) {\n          this.authService.handleLogout();\n        }\n      }\n    }));\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAKEA,YAAY,QACP,sBAAsB;AAE7B,SAAqBC,GAAG,QAAQ,gBAAgB;;;AAKhD,OAAM,MAAOC,eAAe;EAE1BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAiB;EAEhDC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9BR,GAAG,CAACS,KAAK,IAAG;MACV,IAAIA,KAAK,YAAYV,YAAY,EAAE;QACjC;QACA,IAAIU,KAAK,CAACC,GAAG,CAACC,QAAQ,CAAC,OAAO,CAAC,IAAIF,KAAK,CAACC,GAAG,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;UACjE;UACA,MAAMC,eAAe,GAAUH,KAAK,CAACI,IAAI;UACzC,IAAI,CAACV,WAAW,CAACW,WAAW,CAACF,eAAe,CAAC;SAC9C,MAAM,IAAIH,KAAK,CAACC,GAAG,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;UACvC,IAAI,CAACR,WAAW,CAACY,YAAY,EAAE;;;IAGrC,CAAC,CACD,CAAC;EACL;;;mBAnBWd,eAAe;AAAA;;SAAfA,eAAe;EAAAe,SAAff,eAAe;AAAA","names":["HttpResponse","tap","AuthInterceptor","constructor","authService","intercept","request","next","handle","pipe","event","url","endsWith","newlyLoggedUser","body","handleLogin","handleLogout","factory"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\core\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpResponse\n} from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { IUser } from './interfaces';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService) { }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      tap(event => {\n        if (event instanceof HttpResponse) {\n          // localhost:3000/api/login || localhost:3000/register\n          if (event.url.endsWith('login') || event.url.endsWith('register')) {\n            //console.log('login/register happened');\n            const newlyLoggedUser: IUser = event.body;\n            this.authService.handleLogin(newlyLoggedUser);\n          } else if (event.url.endsWith('logout')) {\n            this.authService.handleLogout();\n          }\n        }\n      },\n     ));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}