{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./storage.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class UserService {\n  constructor(storage, httpClient) {\n    this.storage = storage;\n    this.httpClient = httpClient;\n    // console.log('UserService#constructor')\n  }\n\n  getProfile$() {\n    return this.httpClient.get(`${environment.apiUrl}/users/profile`, {\n      withCredentials: true\n    });\n  }\n  updateProfiles$(newUser) {\n    const formData = new FormData();\n    formData.set('username', newUser.username);\n    formData.set('email', newUser.email);\n    if (newUser.profilePicture) {\n      formData.append('profilePicture', newUser.profilePicture);\n    }\n    return this.httpClient.put(`${environment.apiUrl}/users/profile`, formData, {\n      withCredentials: true\n    });\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.StorageService), i0.ɵɵinject(i2.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac\n});","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,8BAA8B;;;;AAW1D,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,OAAuB,EAAUC,UAAsB;IAAvD,YAAO,GAAPD,OAAO;IAA0B,eAAU,GAAVC,UAAU;IAC7D;EACF;;EAEAC,WAAW;IACT,OAAO,IAAI,CAACD,UAAU,CAACE,GAAG,CAAQ,GAAGN,WAAW,CAACO,MAAM,gBAAgB,EAAE;MAAEC,eAAe,EAAE;IAAI,CAAE,CAAC;EACrG;EAEAC,eAAe,CAACC,OAAuB;IACrC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,GAAG,CAAC,UAAU,EAAEH,OAAO,CAACI,QAAQ,CAAC;IAC1CH,QAAQ,CAACE,GAAG,CAAC,OAAO,EAAEH,OAAO,CAACK,KAAK,CAAC;IAEpC,IAAGL,OAAO,CAACM,cAAc,EAAC;MACxBL,QAAQ,CAACM,MAAM,CAAC,gBAAgB,EAAEP,OAAO,CAACM,cAAc,CAAC;;IAG3D,OAAO,IAAI,CAACZ,UAAU,CAACc,GAAG,CAAQ,GAAGlB,WAAW,CAACO,MAAM,gBAAgB,EAAEI,QAAQ,EAAE;MAACH,eAAe,EAAE;IAAI,CAAC,CAAC;EAC7G;;;mBApBWP,WAAW;AAAA;;SAAXA,WAAW;EAAAkB,SAAXlB,WAAW;AAAA","names":["environment","UserService","constructor","storage","httpClient","getProfile$","get","apiUrl","withCredentials","updateProfiles$","newUser","formData","FormData","set","username","email","profilePicture","append","put","factory"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\core\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { IUser } from './interfaces';\nimport { StorageService } from './storage.service';\n\nexport interface IUpdateUserDto extends Pick<IUser, 'username' | 'email'> {\n  profilePicture?: File\n}\n\nexport interface CreateUserDto { username: string, email: string, password: string }\n\n@Injectable()\nexport class UserService {\n\n  constructor(private storage: StorageService, private httpClient: HttpClient) {\n    // console.log('UserService#constructor')\n  }\n\n  getProfile$(): Observable<IUser> {\n    return this.httpClient.get<IUser>(`${environment.apiUrl}/users/profile`, { withCredentials: true })\n  }\n\n  updateProfiles$(newUser: IUpdateUserDto): Observable<IUser> {\n    const formData = new FormData();\n    formData.set('username', newUser.username)\n    formData.set('email', newUser.email)\n\n    if(newUser.profilePicture){\n      formData.append('profilePicture', newUser.profilePicture)\n    }\n    \n    return this.httpClient.put<IUser>(`${environment.apiUrl}/users/profile`, formData, {withCredentials: true})\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}