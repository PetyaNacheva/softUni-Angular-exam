{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport var MessageType;\n(function (MessageType) {\n  MessageType[MessageType[\"Success\"] = 0] = \"Success\";\n  MessageType[MessageType[\"Error\"] = 1] = \"Error\";\n})(MessageType || (MessageType = {}));\nexport class MessageBusService {\n  constructor() {\n    this.messageQueue$ = new Subject();\n    this.onNewMessage$ = this.messageQueue$.asObservable(); // taka se subskraibvam za messageQueue-a\n  }\n\n  notifyForMessage(message) {\n    this.messageQueue$.next(message);\n  } // samo prez tozi metod mogat da se dobavqt novi syobshteniq\n  clear() {\n    this.messageQueue$.next(undefined);\n  }\n}\nMessageBusService.ɵfac = function MessageBusService_Factory(t) {\n  return new (t || MessageBusService)();\n};\nMessageBusService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageBusService,\n  factory: MessageBusService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,MAAM;;AAI9B,WAAYC,WAGX;AAHD,WAAYA,WAAW;EACrBA,mDAAO;EACPA,+CAAK;AACP,CAAC,EAHWA,WAAW,KAAXA,WAAW;AAQvB,OAAM,MAAOC,iBAAiB;EAK5BC;IAJQ,kBAAa,GAAG,IAAIH,OAAO,EAAW;IAE9C,kBAAa,GAAG,IAAI,CAACI,aAAa,CAACC,YAAY,EAAE,CAAC,CAAC;EAEnC;;EAEhBC,gBAAgB,CAACC,OAAgB;IAC/B,IAAI,CAACH,aAAa,CAACI,IAAI,CAACD,OAAO,CAAC;EAClC,CAAC,CAAC;EAEFE,KAAK;IACH,IAAI,CAACL,aAAa,CAACI,IAAI,CAACE,SAAS,CAAC;EACpC;;;mBAbWR,iBAAiB;AAAA;;SAAjBA,iBAAiB;EAAAS,SAAjBT,iBAAiB;EAAAU,YAFhB;AAAM","names":["Subject","MessageType","MessageBusService","constructor","messageQueue$","asObservable","notifyForMessage","message","next","clear","undefined","factory","providedIn"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\core\\message-bus.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nexport interface Message { text: string, type: MessageType }\n\nexport enum MessageType {\n  Success,\n  Error\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageBusService {\n  private messageQueue$ = new Subject<Message>();\n\n  onNewMessage$ = this.messageQueue$.asObservable(); // taka se subskraibvam za messageQueue-a\n\n  constructor() { }\n\n  notifyForMessage(message: Message) {\n    this.messageQueue$.next(message);\n  } // samo prez tozi metod mogat da se dobavqt novi syobshteniq\n\n  clear(): void {\n    this.messageQueue$.next(undefined);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}