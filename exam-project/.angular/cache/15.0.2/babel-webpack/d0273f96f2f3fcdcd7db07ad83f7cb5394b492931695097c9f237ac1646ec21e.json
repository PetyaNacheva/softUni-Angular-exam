{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { MessageType } from 'src/app/core/message-bus.service';\nimport { emailValidator } from '../util';\nconst myRequired = control => {\n  // console.log('validator called');\n  return Validators.required(control);\n};\nlet LoginComponent = class LoginComponent {\n  constructor(formBuilder, authService, activatedRoute, messageBus, router) {\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.activatedRoute = activatedRoute;\n    this.messageBus = messageBus;\n    this.router = router;\n    this.errorMessage = '';\n    this.loginFormGroup = this.formBuilder.group({\n      email: new FormControl('', {\n        validators: [myRequired, emailValidator],\n        updateOn: 'submit'\n      }),\n      password: new FormControl(null, [Validators.required, Validators.minLength(5)])\n    });\n  }\n  ngOnInit() {\n    // this.loginFormGroup.get('email').valueChanges.subscribe(value => {\n    //   console.log('email changed', value);\n    // })\n  }\n  loginHandler() {\n    // TODO stoimenovg: validate user's data.\n    // this.userService.login();\n    // this.router.navigate(['/home']);\n    // console.log('fromClickHandler', this.loginFormGroup.valid);\n  }\n  handleLogin() {\n    // console.log('fromNgSubmit', this.loginFormGroup.valid);\n    this.errorMessage = '';\n    this.authService.login$(this.loginFormGroup.value).subscribe({\n      next: () => {\n        if (this.activatedRoute.snapshot.queryParams['redirect-to']) {\n          this.router.navigateByUrl(this.activatedRoute.snapshot.queryParams['redirect-to']);\n        } else {\n          this.router.navigate(['/home']);\n        }\n        this.messageBus.notifyForMessage({\n          text: 'User successfully logged in!',\n          type: MessageType.Success\n        });\n      },\n      complete: () => {\n        //console.log('login stream completed')\n      },\n      error: err => {\n        this.errorMessage = err.error.message;\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAuCC,WAAW,EAAaC,UAAU,QAAQ,gBAAgB;AAGjG,SAA4BC,WAAW,QAAQ,kCAAkC;AAEjF,SAASC,cAAc,QAAQ,SAAS;AAExC,MAAMC,UAAU,GAAIC,OAAwB,IAAI;EAC9C;EACA,OAAOJ,UAAU,CAACK,QAAQ,CAACD,OAAO,CAAC;AACrC,CAAC;AAOM,IAAME,cAAc,GAApB,MAAMA,cAAc;EAQzBC,YACUC,WAAwB,EACxBC,WAAwB,EACxBC,cAA8B,EAC9BC,UAA6B,EAC7BC,MAAc;IAJd,gBAAW,GAAXJ,WAAW;IACX,gBAAW,GAAXC,WAAW;IACX,mBAAc,GAAdC,cAAc;IACd,eAAU,GAAVC,UAAU;IACV,WAAM,GAANC,MAAM;IAZhB,iBAAY,GAAW,EAAE;IAEzB,mBAAc,GAAc,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MACjDC,KAAK,EAAE,IAAIf,WAAW,CAAC,EAAE,EAAE;QAAEgB,UAAU,EAAE,CAACZ,UAAU,EAAED,cAAc,CAAC;QAAEc,QAAQ,EAAE;MAAQ,CAAE,CAAC;MAC5FC,QAAQ,EAAE,IAAIlB,WAAW,CAAC,IAAI,EAAE,CAACC,UAAU,CAACK,QAAQ,EAAEL,UAAU,CAACkB,SAAS,CAAC,CAAC,CAAC,CAAC;KAC/E,CAAC;EAO0B;EAE5BC,QAAQ;IAEN;IACA;IACA;EAAA;EAGFC,YAAY;IACV;IACA;IACA;IAEA;EAAA;EAGFC,WAAW;IACT;IAEA,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB,IAAI,CAACb,WAAW,CAACc,MAAM,CAAC,IAAI,CAACC,cAAc,CAACC,KAAK,CAAC,CAACC,SAAS,CAAC;MAC3DC,IAAI,EAAE,MAAK;QACT,IAAI,IAAI,CAACjB,cAAc,CAACkB,QAAQ,CAACC,WAAW,CAAC,aAAa,CAAC,EAAE;UAC3D,IAAI,CAACjB,MAAM,CAACkB,aAAa,CAAC,IAAI,CAACpB,cAAc,CAACkB,QAAQ,CAACC,WAAW,CAAC,aAAa,CAAC,CAAC;SACnF,MAAM;UACL,IAAI,CAACjB,MAAM,CAACmB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;QAGjC,IAAI,CAACpB,UAAU,CAACqB,gBAAgB,CAAC;UAAEC,IAAI,EAAE,8BAA8B;UAAEC,IAAI,EAAEjC,WAAW,CAACkC;QAAO,CAAE,CAAC;MACvG,CAAC;MACDC,QAAQ,EAAE,MAAK;QACb;MAAA,CACD;MACDC,KAAK,EAAGC,GAAG,IAAI;QACb,IAAI,CAAChB,YAAY,GAAGgB,GAAG,CAACD,KAAK,CAACE,OAAO;MACvC;KACD,CAAC;EACJ;CACD;AApDYjC,cAAc,eAL1BR,SAAS,CAAC;EACT0C,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWpC,cAAc,CAoD1B;SApDYA,cAAc","names":["Component","FormControl","Validators","MessageType","emailValidator","myRequired","control","required","LoginComponent","constructor","formBuilder","authService","activatedRoute","messageBus","router","group","email","validators","updateOn","password","minLength","ngOnInit","loginHandler","handleLogin","errorMessage","login$","loginFormGroup","value","subscribe","next","snapshot","queryParams","navigateByUrl","navigate","notifyForMessage","text","type","Success","complete","error","err","message","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Softuni\\softUni-Angular\\exam-project\\src\\app\\auth\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from 'src/app/auth.service';\nimport { MessageBusService, MessageType } from 'src/app/core/message-bus.service';\nimport { UserService } from 'src/app/core/user.service';\nimport { emailValidator } from '../util';\n\nconst myRequired = (control: AbstractControl) => {\n  // console.log('validator called');\n  return Validators.required(control);\n}\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  errorMessage: string = '';\n\n  loginFormGroup: FormGroup = this.formBuilder.group({\n    email: new FormControl('', { validators: [myRequired, emailValidator], updateOn: 'submit' }),\n    password: new FormControl(null, [Validators.required, Validators.minLength(5)])\n  });\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private activatedRoute: ActivatedRoute,\n    private messageBus: MessageBusService,\n    private router: Router) { }\n\n  ngOnInit(): void {\n\n    // this.loginFormGroup.get('email').valueChanges.subscribe(value => {\n    //   console.log('email changed', value);\n    // })\n  }\n\n  loginHandler(): void {\n    // TODO stoimenovg: validate user's data.\n    // this.userService.login();\n    // this.router.navigate(['/home']);\n\n    // console.log('fromClickHandler', this.loginFormGroup.valid);\n  }\n\n  handleLogin(): void {\n    // console.log('fromNgSubmit', this.loginFormGroup.valid);\n\n    this.errorMessage = '';\n    this.authService.login$(this.loginFormGroup.value).subscribe({\n      next: () => {\n        if (this.activatedRoute.snapshot.queryParams['redirect-to']) {\n          this.router.navigateByUrl(this.activatedRoute.snapshot.queryParams['redirect-to'])\n        } else {\n          this.router.navigate(['/home']);\n        }\n\n        this.messageBus.notifyForMessage({ text: 'User successfully logged in!', type: MessageType.Success })\n      },\n      complete: () => {\n        //console.log('login stream completed')\n      },\n      error: (err) => {\n        this.errorMessage = err.error.message;\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}